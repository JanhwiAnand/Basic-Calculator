import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { Bar } from 'react-chartjs-2';
import Chart from 'chart.js/auto';
import './AdminDashboard.css';
import { fetchAppliedLeaves, fetchPendingLeaves } from '../redux/actions/leaveActions';
import { useNavigate } from 'react-router-dom';

const AdminDashboard = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const [startDate, setStartDate] = useState(new Date(new Date().setDate(new Date().getDate() - 30)));
  const [endDate, setEndDate] = useState(new Date());

  const appliedLeaves = useSelector((state) => state.leave.appliedLeaves);
  const pendingLeaves = useSelector((state) => state.leave.pendingLeaves);
  const loading = useSelector((state) => state.leave.loading);

  useEffect(() => {
    dispatch(fetchAppliedLeaves(startDate, endDate));
    dispatch(fetchPendingLeaves());
  }, [dispatch, startDate, endDate]);

  const leaveCountsByCategory = appliedLeaves.reduce((acc, leave) => {
    const category = leave.category || leave.type || 'Unknown';
    acc[category] = (acc[category] || 0) + 1;
    return acc;
  }, {});

  const chartData = {
    labels: Object.keys(leaveCountsByCategory),
    datasets: [
      {
        label: 'Leave Count',
        data: Object.values(leaveCountsByCategory),
        backgroundColor: 'rgba(54, 162, 235, 0.6)',
        borderColor: 'rgba(54, 162, 235, 1)',
        borderWidth: 1,
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    plugins: {
      legend: { display: false },
      tooltip: {
        callbacks: {
          label: (context) => `${context.label}: ${context.raw}`,
        },
      },
    },
    scales: {
      y: {
        beginAtZero: true,
        ticks: { precision: 0 },
      },
    },
  };

  return (
    <div className="admin-dashboard">
      <h1>Admin Dashboard</h1>

      <div className="dashboard-actions">
        <button onClick={() => navigate('/add-user')}>Add User</button>
        <button onClick={() => navigate('/approve-leaves')}>Approve Leaves</button>
      </div>

      <div className="date-filter">
        <label>Start Date: </label>
        <DatePicker selected={startDate} onChange={(date) => setStartDate(date)} maxDate={new Date()} />
        <label>End Date: </label>
        <DatePicker selected={endDate} onChange={(date) => setEndDate(date)} maxDate={new Date()} />
      </div>

      <div className="dashboard-cards">
        {/* Card 1 - Applied Leaves */}
        <div className="card">
          <div className="card-header">Users Applied for Leaves (Last 1 Month)</div>
          <div className="card-body">
            {loading ? (
              <p>Loading...</p>
            ) : (
              <table>
                <thead>
                  <tr>
                    <th>Email</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                  </tr>
                </thead>
                <tbody>
                  {appliedLeaves.length > 0 ? (
                    appliedLeaves.map((leave, index) => (
                      <tr key={index}>
                        <td>{leave.user?.email || 'N/A'}</td>
                        <td>{leave.startDate}</td>
                        <td>{leave.endDate}</td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan="3">No leave applications in this range.</td>
                    </tr>
                  )}
                </tbody>
              </table>
            )}
          </div>
        </div>

        {/* Card 2 - Pending Requests */}
        <div className="card">
          <div className="card-header">Users with Pending Leave Requests</div>
          <div className="card-body">
            {loading ? (
              <p>Loading...</p>
            ) : (
              <table>
                <thead>
                  <tr>
                    <th>Email</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                  </tr>
                </thead>
                <tbody>
                  {pendingLeaves.length > 0 ? (
                    pendingLeaves.map((leave, index) => (
                      <tr key={index}>
                        <td>{leave.user?.email || 'N/A'}</td>
                        <td>{leave.startDate}</td>
                        <td>{leave.endDate}</td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan="3">No pending leave requests.</td>
                    </tr>
                  )}
                </tbody>
              </table>
            )}
          </div>
        </div>

        {/* Card 3 - Leave Category Chart */}
        <div className="card">
          <div className="card-header">Leave Category Chart</div>
          <div className="card-body">
            {chartData.labels.length > 0 ? (
              <Bar data={chartData} options={chartOptions} />
            ) : (
              <p>No data to display.</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminDashboard;
.admin-dashboard {
  padding: 30px;
  font-family: Arial, sans-serif;
}

h1 {
  text-align: center;
  margin-bottom: 30px;
  color: #333;
}

.dashboard-actions {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
  gap: 20px;
}

.dashboard-actions button {
  padding: 10px 20px;
  background-color: #1976d2;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s;
}

.dashboard-actions button:hover {
  background-color: #125aa8;
}

.date-filter {
  display: flex;
  justify-content: center;
  gap: 15px;
  align-items: center;
  margin-bottom: 30px;
  flex-wrap: wrap;
}

.dashboard-cards {
  display: flex;
  flex-wrap: wrap;
  gap: 25px;
  justify-content: center;
}

.card {
  background-color: #f9f9f9;
  border: 1px solid #ccc;
  border-radius: 12px;
  width: 350px;
  padding: 20px;
  box-shadow: 2px 2px 8px rgba(0,0,0,0.1);
}

.card-header {
  font-size: 18px;
  font-weight: bold;
  margin-bottom: 15px;
  color: #222;
}

.card-body {
  max-height: 300px;
  overflow-y: auto;
}

.card-body table {
  width: 100%;
  border-collapse: collapse;
}

.card-body th, .card-body td {
  padding: 8px 12px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

.card-body th {
  background-color: #e9ecef;
}
