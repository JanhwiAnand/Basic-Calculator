import React, { useState } from 'react';
import '../css/AddEmployee.css';
import { useDispatch, useSelector } from 'react-redux';
import { getToken } from '../redux/selectors';
import { addUser } from '../redux/actions/userActions';
import { Eye, EyeOff } from 'lucide-react';

const departments = ['HR', 'Development', 'Marketing', 'Finance', 'Production', 'Devops'];
const states = [
  'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh',
  'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jharkhand',
  'Karnataka', 'Kerala', 'Madhya Pradesh', 'Maharashtra', 'Manipur',
  'Meghalaya', 'Mizoram', 'Nagaland', 'Odisha', 'Punjab',
  'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana', 'Tripura',
  'Uttar Pradesh', 'Uttarakhand', 'West Bengal', 'Delhi', 'Jammu & Kashmir',
  'Ladakh', 'Puducherry', 'Chandigarh', 'Andaman and Nicobar Islands', 'Dadra and Nagar Haveli and Daman and Diu', 'Lakshadweep'
];

const AddEmployee = () => {
  const dispatch = useDispatch();
  const token = useSelector(getToken);

  const [employee, setEmployee] = useState({
    email: '',
    firstname: '',
    lastname: '',
    department: '',
    phnno: '',
    country: '',
    state: '',
    city: '',
    date_of_joining: '',
    password: '',
    confirmPassword: '',
    role: 'EMPLOYEE',
  });

  const [errors, setErrors] = useState({});
  const [addUserLoading, setAddUserLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [passwordStrength, setPasswordStrength] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEmployee((prev) => ({ ...prev, [name]: value }));
    validateField(name, value);

    if (name === 'password') validateField('confirmPassword', employee.confirmPassword);
    if (name === 'confirmPassword') validateField('confirmPassword', value);
  };

  const validateField = (name, value) => {
    let error = '';
    switch (name) {
      case 'email':
        if (!value.endsWith('@infinite.com') || value.length > 100) {
          error = 'Email must end with @infinite.com and be less than 100 chars.';
        }
        break;
      case 'phnno':
        if (!/^\d{1,12}$/.test(value)) {
          error = 'Mobile number must be up to 12 digits only.';
        }
        break;
      case 'firstname':
      case 'lastname':
        if (!/^[a-zA-Z]+$/.test(value)) {
          error = 'Name must contain only letters.';
        }
        break;
      case 'password': {
        const hasLower = /[a-z]/.test(value);
        const hasUpper = /[A-Z]/.test(value);
        const hasDigit = /\d/.test(value);
        const hasSpecial = /[@$!%*?&]/.test(value);
        const length = value.length;

        const strengthCount = [hasLower, hasUpper, hasDigit, hasSpecial].filter(Boolean).length;

        if (strengthCount === 4 && length >= 8) {
          setPasswordStrength('Strong');
        } else if (strengthCount >= 2 && length >= 6) {
          setPasswordStrength('Moderate');
        } else {
          setPasswordStrength('Weak');
        }

        if (!(hasLower && hasUpper && hasDigit && hasSpecial && length >= 8)) {
          error = 'Password must be 8+ chars, include uppercase, lowercase, number, special char.';
        }
        break;
      }
      case 'confirmPassword':
        if (value !== employee.password) {
          error = 'Confirm password must match the password.';
        }
        break;
      default:
        if (!value.trim()) {
          error = 'This field is required.';
        }
    }

    setErrors((prev) => ({ ...prev, [name]: error }));
  };

  const isFormValid = () => {
    let valid = true;
    const newErrors = {};

    Object.entries(employee).forEach(([field, value]) => {
      validateField(field, value);
      if (errors[field]) valid = false;
    });

    setErrors(newErrors);
    return valid;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!isFormValid()) return;

    setAddUserLoading(true);
    try {
      const { confirmPassword, ...userWithoutConfirm } = employee;
      await dispatch(addUser(userWithoutConfirm, token));
      alert('User added successfully!');
      setEmployee({
        email: '',
        firstname: '',
        lastname: '',
        department: '',
        phnno: '',
        country: '',
        state: '',
        city: '',
        date_of_joining: '',
        password: '',
        confirmPassword: '',
        role: 'EMPLOYEE',
      });
      setErrors({});
      setPasswordStrength('');
    } catch (error) {
      alert(error.message || 'Failed to add user');
    } finally {
      setAddUserLoading(false);
    }
  };

  const today = new Date().toISOString().split('T')[0];

  return (
    <div className="add-employee-container">
      <div className="add-employee-card">
        <h3>Add Employee</h3>
        <form className="add-employee-form" onSubmit={handleSubmit} noValidate>
          <div className="row g-3">
            {[
              ['Email ID', 'email', 'email'],
              ['Mobile No', 'phnno', 'text'],
              ['First Name', 'firstname', 'text'],
              ['Last Name', 'lastname', 'text'],
              ['Department', 'department', 'select', departments],
              ['Country', 'country', 'text'],
              ['State', 'state', 'select', states],
              ['City', 'city', 'text'],
              ['Date of Joining', 'date_of_joining', 'date'],
              ['Password', 'password', 'password'],
              ['Confirm Password', 'confirmPassword', 'password']
            ].map(([label, name, type, options]) => (
              <div className="col-md-6 position-relative" key={name}>
                <label className="form-label">{label}</label>
                {type === 'select' ? (
                  <select
                    className="form-select"
                    name={name}
                    value={employee[name]}
                    onChange={handleChange}
                    required
                  >
                    <option value="">Select {label}</option>
                    {options.map((opt, i) => (
                      <option key={i} value={opt}>
                        {opt}
                      </option>
                    ))}
                  </select>
                ) : (
                  <input
                    type={['password', 'confirmPassword'].includes(name) && (name === 'password' ? showPassword : showConfirmPassword)
                      ? 'text'
                      : type}
                    className="form-control"
                    name={name}
                    value={employee[name]}
                    onChange={handleChange}
                    min={name === 'date_of_joining' ? today : undefined}
                    required
                  />
                )}
                {['password', 'confirmPassword'].includes(name) && (
                  <span
                    className="add-employee-password-toggle"
                    onClick={() =>
                      name === 'password'
                        ? setShowPassword(!showPassword)
                        : setShowConfirmPassword(!showConfirmPassword)
                    }
                  >
                    {name === 'password'
                      ? showPassword
                        ? <EyeOff size={18} />
                        : <Eye size={18} />
                      : showConfirmPassword
                      ? <EyeOff size={18} />
                      : <Eye size={18} />}
                  </span>
                )}
                {name === 'password' && employee.password && (
                  <div
                    className="add-employee-password-strength"
                    style={{
                      color:
                        passwordStrength === 'Strong'
                          ? 'green'
                          : passwordStrength === 'Moderate'
                          ? 'orange'
                          : 'red',
                    }}
                  >
                    Strength: {passwordStrength}
                  </div>
                )}
                {errors[name] && (
                  <div className="add-employee-error">{errors[name]}</div>
                )}
              </div>
            ))}
          </div>
          <div className="add-employee-button-container">
            <button type="submit" className="btn btn-primary" disabled={addUserLoading}>
              {addUserLoading ? 'Adding...' : 'Add User'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddEmployee;
/* AddEmployee.css */

.add-employee-container {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 40px 20px;
  min-height: 100vh;
  background: #f4f7fa;
}

.add-employee-card {
  background: #fff;
  border-radius: 20px;
  padding: 30px;
  max-width: 900px;
  width: 100%;
  box-shadow: 0 0 25px rgba(0, 0, 0, 0.1);
}

.add-employee-card h3 {
  text-align: center;
  margin-bottom: 25px;
  font-size: 24px;
  font-weight: 700;
  color: #333;
}

.add-employee-form .form-label {
  font-weight: 600;
  color: #333;
}

.add-employee-form input,
.add-employee-form select {
  border-radius: 10px;
  height: 42px;
}

.add-employee-form input:focus,
.add-employee-form select:focus {
  border-color: #0d6efd;
  box-shadow: 0 0 5px rgba(13, 110, 253, 0.3);
}

.add-employee-error {
  color: red;
  font-size: 14px;
  margin-top: 4px;
}

.add-employee-password-strength {
  font-weight: 600;
  margin-top: 5px;
}

.add-employee-button-container {
  display: flex;
  justify-content: center;
  margin-top: 30px;
}

.add-employee-form button {
  width: 160px;
  padding: 10px;
  font-weight: 600;
  border-radius: 10px;
  box-shadow: 0 3px 10px rgba(0, 123, 255, 0.2);
  transition: 0.3s;
}

.add-employee-form button:hover {
  transform: translateY(-1px);
}

.add-employee-password-toggle {
  position: absolute;
  right: 15px;
  top: 38px;
  cursor: pointer;
}

@media (max-width: 767px) {
  .add-employee-card {
    padding: 20px;
  }

  .add-employee-form input,
  .add-employee-form select {
    font-size: 14px;
    height: 40px;
  }

  .add-employee-button-container {
    margin-top: 20px;
  }
}

