import { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchAppliedLeavesByDateRange, fetchPendingLeaves } from '../redux/actions/leaveActions';
import { getToken, getUser, getAppliedLeavesByDateRange, getPendingLeaves, getLeaveLoading, getLeaveError } from '../redux/selectors';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { format } from 'date-fns';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';
import { NavLink } from 'react-router-dom';
import '../css/Dashboard.css'; // External CSS file

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const Dashboard = () => {
  const dispatch = useDispatch();
  const token = useSelector(getToken);
  const user = useSelector(getUser);
  const appliedLeaves = useSelector(getAppliedLeavesByDateRange);
  const pendingLeaves = useSelector(getPendingLeaves);
  const loading = useSelector(getLeaveLoading);
  const error = useSelector(getLeaveError);

  const [dateRange, setDateRange] = useState(() => {
    const end = new Date();
    const start = new Date();
    start.setMonth(end.getMonth() - 1);
    return [start, end];
  });
  const [startDate, endDate] = dateRange;

  useEffect(() => {
    if (token && user?.role === 'ADMIN' && startDate && endDate) {
      const formattedStartDate = format(startDate, 'yyyy-MM-dd');
      const formattedEndDate = format(endDate, 'yyyy-MM-dd');
      dispatch(fetchAppliedLeavesByDateRange(formattedStartDate, formattedEndDate, token));
      dispatch(fetchPendingLeaves(token));
    }
  }, [dispatch, token, user?.role, startDate, endDate]);

  // Fix: Define `chartData` and `chartOptions`
  const categoryCounts = appliedLeaves.reduce((acc, leave) => {
    acc[leave.category] = (acc[leave.category] || 0) + 1;
    return acc;
  }, {});

  const chartData = {
    labels: Object.keys(categoryCounts),
    datasets: [
      {
        label: 'Leave Applications by Category',
        data: Object.values(categoryCounts),
        backgroundColor: ['#FF6B6B', '#4ECDC4', '#45B7D1'],
        borderColor: ['#FF6B6B', '#4ECDC4', '#45B7D1'],
        borderWidth: 1,
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    plugins: {
      legend: { position: 'top' },
      title: { display: true, text: 'Leave Applications by Category' },
    },
  };

  return (
    <div className="dashboard-container">
      <header className="dashboard-header">
        <h1>Admin Dashboard</h1>
        <span>Welcome, {user?.email}</span>
      </header>

      <main className="dashboard-content">
        {error && <div className="error-message">{error}</div>}

        <div className="dashboard-cards">
          <div className="card">
            <div className="card-header">
              <h5>Leave Applications</h5>
              <DatePicker
                selectsRange={true}
                startDate={startDate}
                endDate={endDate}
                onChange={(update) => setDateRange(update)}
                className="date-picker"
                placeholderText="Select date range"
                //maxDate={new Date()}
              />
            </div>
            <div className="card-body">
              {loading ? (
                <p>Loading...</p>
              ) : (
                <>
                  <h2>{appliedLeaves.length}</h2>
                  <p>Applications from {format(startDate, 'MMM dd, yyyy')} to {format(endDate, 'MMM dd, yyyy')}</p>
                  <div className="table-container">
                    <table>
                      <thead>
                        <tr>
                          {/* <th>Email</th> */}
                          <th>Category</th>
                          <th>Dates</th>
                          <th>Status</th>
                        </tr>
                      </thead>
                      <tbody>
                        {appliedLeaves.length === 0 ? (
                          <tr><td colSpan="4">No leave applications</td></tr>
                        ) : (
                          appliedLeaves.map(leave => (
                            <tr key={leave.id}>
                              {/* <td>{leave.user?.email || 'N/A'}</td> */}
                              <td>{leave.category}</td>
                              <td>{format(new Date(leave.startDate), 'MMM dd')} - {format(new Date(leave.endDate), 'MMM dd')}</td>
                              <td>{leave.status}</td>
                            </tr>
                          ))
                        )}
                      </tbody>
                    </table>
                  </div>
                </>
              )}
            </div>
          </div>

          <div className="card">
            <div className="card-header">
              <h5>Pending Leaves</h5>
            </div>
            <div className="card-body">
              {loading ? (
                <p>Loading...</p>
              ) : (
                <>
                  <h2>{pendingLeaves.length}</h2>
                  <p>Leaves awaiting approval</p>
                  <div className="table-container">
                    <table>
                      <thead>
                        <tr>
                          {/* <th>Email</th> */}
                          <th>Category</th>
                          <th>Dates</th>
                        </tr>
                      </thead>
                      <tbody>
                        {pendingLeaves.length === 0 ? (
                          <tr><td colSpan="3">No pending leaves</td></tr>
                        ) : (
                          pendingLeaves.map(leave => (
                            <tr key={leave.id}>
                              {/* <td>{leave.user?.email || 'N/A'}</td> */}
                              <td>{leave.category}</td>
                              <td>{format(new Date(leave.startDate), 'MMM dd')} - {format(new Date(leave.endDate), 'MMM dd')}</td>
                            </tr>
                          ))
                        )}
                      </tbody>
                    </table>
                  </div>
                </>
              )}
            </div>
          </div>

          <div className="card">
            <div className="card-header">
              <h5>Leave Categories</h5>
            </div>
            <div className="card-body">
              {appliedLeaves.length > 0 ? (
                <Bar data={chartData} options={chartOptions} />
              ) : (
                <p>No data to display</p>
              )}
            </div>
          </div>
        </div>

        <div className="dashboard-actions">
          <NavLink to="/add-employee" className="button">Add New User</NavLink>
          <NavLink to="/approval" className="button">Approve Leaves</NavLink>
        </div>
      </main>
    </div>
  );
};

export default Dashboard;

.dashboard-container {
  background-color: #f7f9fc; /* Soft light color */
  color: #333;
  min-height: 100vh;
  padding: 20px;
}

.dashboard-header {
  background: #e3ebf6;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
  text-align: center;
}


.dashboard-cards {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  justify-content: center; 
}

.card {
  background: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.15); /* ✅ Stronger shadow for depth */
  flex: 1;
  min-width: 280px;
  max-width: 400px;
  transition: all 0.3s ease-in-out;
}

.card:hover {
  transform: scale(1.03); 
}


.dashboard-actions {
  display: flex;
  justify-content: center; 
  gap: 20px; 
  margin-top: 30px;
}

.button {
  padding: 12px 20px;
  background: #2a5298;
  color: white;
  border: 2px solid #1e3a75;
  border-radius: 8px;
  font-size: 16px;
  cursor: pointer;
  text-decoration: none;
  display: inline-block;
  transition: all 0.3s ease-in-out;
}

.button:hover {
  background: #1e3a75;
  transform: scale(1.05);
}


.date-picker {
  padding: 10px;
  border: 2px solid #2a5298;
  border-radius: 6px;
  font-size: 14px;
  background-color: white;
  display: block;
  margin: 0 auto; 
}
/* ✅ Cards Grid Layout */
.dashboard-cards {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  justify-content: center; /* Centers cards */
}


.card {
  background: white;
  padding: 20px;
  border-radius: 12px; 
  box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.15);
  flex: 1;
  min-width: 300px;
  max-width: 400px;
  transition: all 0.3s ease-in-out;
  position: relative;
}

.card:hover {
  transform: scale(1.05);
  box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
}

.card-header {
  background: #2a5298; /* Deep blue */
  color: white;
  padding: 12px;
  border-radius: 10px 10px 0 0; /* Rounded top edges */
  font-size: 18px;
  font-weight: bold;
  text-align: center;
}

.card-body {
  padding: 15px;
  font-size: 16px;
  text-align: center;
}


.card-body h2 {
  font-size: 28px;
  font-weight: bold;
  color: #2a5298; /* Matching deep blue */
}

.table-container {
  max-height: 200px;
  overflow-y: auto;
}

.table-container::-webkit-scrollbar {
  width: 6px;
}

.table-container::-webkit-scrollbar-thumb {
  background: #2a5298;
  border-radius: 6px;
}


.dashboard-actions {
  display: flex;
  justify-content: center;
  gap: 20px;
  margin-top: 30px;
}

.dashboard-cards {
  display: flex;
  flex-wrap: wrap;
  gap: 25px;
  justify-content: center;
}

.card {
  background: linear-gradient(to right, #ffffff, #f0f4f8); /* Soft gradient */
  padding: 25px;
  border-radius: 15px;
  box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2); /* ✅ Stronger depth */
  flex: 1;
  min-width: 320px;
  max-width: 420px;
  transition: all 0.3s ease-in-out;
  position: relative;
}


.card:hover {
  transform: translateY(-5px); /* ✅ Smooth elevation */
  box-shadow: 0px 10px 18px rgba(0, 0, 0, 0.25);
}


.card-header {
  background: #2a5298;
  color: white;
  padding: 14px;
  border-radius: 12px 12px 0 0;
  font-size: 20px;
  font-weight: bold;
  text-align: center;
  letter-spacing: 1px;
}


.card-body {
  padding: 20px;
  font-size: 16px;
  text-align: center;
  font-weight: 500;
}

.card-body h2 {
  font-size: 32px;
  font-weight: bold;
  color: #2a5298;
}

.table-container {
  max-height: 220px;
  overflow-y: auto;
}

.table-container::-webkit-scrollbar {
  width: 6px;
}

.table-container::-webkit-scrollbar-thumb {
  background: #2a5298;
  border-radius: 6px;
}

.dashboard-actions {
  display: flex;
  justify-content: center;
  gap: 25px;
  margin-top: 35px;
}

.button {
  padding: 14px 22px;
  background: #2a5298;
  color: white;
  border: 2px solid #1e3a75;
  border-radius: 10px;
  font-size: 18px;
  cursor: pointer;
  text-decoration: none;
  display: inline-block;
  transition: all 0.3s ease-in-out;
  font-weight: bold;
}

.button:hover {
  background: #1e3a75;
  transform: scale(1.07);
}
/* ✅ Lightened background for the whole application */
.dashboard-container {
  background-color: #f7f9fc; /* Soft light color */
  color: #333;
  min-height: 100vh;
  padding: 20px;
}

/* ✅ Polished header section */
.dashboard-header {
  background: #e3ebf6;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
  text-align: center;
}

/* ✅ Enhanced card styling */
.dashboard-cards {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  justify-content: center; /* ✅ Centers cards */
}

.card {
  background: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.15); /* ✅ Stronger shadow for depth */
  flex: 1;
  min-width: 280px;
  max-width: 400px;
  transition: all 0.3s ease-in-out;
}

.card:hover {
  transform: scale(1.03); /* ✅ Hover effect */
}

/* ✅ Improved button design */
.dashboard-actions {
  display: flex;
  justify-content: center; /* ✅ Centers buttons */
  gap: 20px; /* ✅ Adds space between buttons */
  margin-top: 30px;
}

.button {
  padding: 12px 20px;
  background: #2a5298;
  color: white;
  border: 2px solid #1e3a75;
  border-radius: 8px;
  font-size: 16px;
  cursor: pointer;
  text-decoration: none;
  display: inline-block;
  transition: all 0.3s ease-in-out;
}

.button:hover {
  background: #1e3a75;
  transform: scale(1.05);
}

.date-picker {
  padding: 10px;
  border: 2px solid #2a5298;
  border-radius: 6px;
  font-size: 14px;
  background-color: white;
  display: block;
  margin: 0 auto; 
}
