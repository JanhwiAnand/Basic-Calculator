String firstname = requestDTO.getFirstname();
    String lastname = requestDTO.getLastname();
    String email = requestDTO.getEmail();

    Optional<User> userOptional = userRepository.findByFirstnameAndLastnameAndEmail(firstname, lastname, email);

    if (userOptional.isPresent()) {
        // You can log or trigger a token flow here if needed
        return ResponseEntity.ok().body(Collections.singletonMap("message", "User verified. Proceed to reset password."));
    } else {
        return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body(Collections.singletonMap("error", "User not found with provided details."));
    }
}
 @PostMapping("/forgot-password")
    public ResponseEntity<String> forgotPassword(@RequestBody ForgotPasswordRequest request) {
        boolean valid = userService.validateUserForPasswordReset(request);
        if (valid) {
            return ResponseEntity.ok("User verified. You may reset password.");
        } else {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("User details not found or incorrect.");
        }
}
