import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { getUser } from '../redux/selectors';
import { getUserProfile, getUserLoading, getUserError } from '../redux/selectors';
import { updateUserProfile } from '../redux/actions/userActions';
import './Profile.css';

const Profile = () => {
  const dispatch = useDispatch();
  const loggedInUser = useSelector(getUser);
  const profile = useSelector(getUserProfile);
  const loading = useSelector(getUserLoading);
  const error = useSelector(getUserError);

  const [formData, setFormData] = useState({
    email: '',
    role: '',
    firstname: '',
    lastname: '',
    city: '',
    state: '',
    country: '',
    department: '',
    phnno: '',
    date_of_joining: '',
  });

  useEffect(() => {
    if (loggedInUser) {
      setFormData({ ...formData, ...loggedInUser });
    }
  }, [loggedInUser]);

  const handleChange = e => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  const handleSubmit = e => {
    e.preventDefault();
    dispatch(updateUserProfile(formData));
  };

  return (
    <div className="profile-container">
      <h2 className="profile-title">My Profile</h2>
      {error && <div className="error-msg">{error}</div>}
      {loading && <div className="loading-msg">Updating...</div>}
      <form className="profile-form" onSubmit={handleSubmit}>
        <div className="form-row">
          <label>Email</label>
          <input name="email" value={formData.email} onChange={handleChange} disabled />
        </div>

        <div className="form-row">
          <label>First Name</label>
          <input name="firstname" value={formData.firstname} onChange={handleChange} />
        </div>

        <div className="form-row">
          <label>Last Name</label>
          <input name="lastname" value={formData.lastname} onChange={handleChange} />
        </div>

        <div className="form-row">
          <label>City</label>
          <input name="city" value={formData.city} onChange={handleChange} />
        </div>

        <div className="form-row">
          <label>State</label>
          <input name="state" value={formData.state} onChange={handleChange} />
        </div>

        <div className="form-row">
          <label>Country</label>
          <input name="country" value={formData.country} onChange={handleChange} />
        </div>

        <div className="form-row">
          <label>Department</label>
          <input name="department" value={formData.department} onChange={handleChange} />
        </div>

        <div className="form-row">
          <label>Phone No</label>
          <input name="phnno" value={formData.phnno} onChange={handleChange} />
        </div>

        <div className="form-row">
          <label>Date of Joining</label>
          <input type="date" name="date_of_joining" value={formData.date_of_joining} onChange={handleChange} />
        </div>

        <button type="submit" className="update-btn">Update Profile</button>
      </form>
    </div>
  );
};

export default Profile;


const initialState = {
  users: [],
  profile: null,
  loading: false,
  error: null,
};

const userReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'ADD_USER_REQUEST':
    case 'UPDATE_USER_PROFILE_REQUEST':
      return { ...state, loading: true, error: null };

    case 'ADD_USER_SUCCESS':
      return { ...state, users: [...state.users, action.payload], loading: false };

    case 'UPDATE_USER_PROFILE_SUCCESS':
      return { ...state, profile: action.payload, loading: false };

    case 'ADD_USER_FAILURE':
    case 'UPDATE_USER_PROFILE_FAILURE':
      return { ...state, error: action.payload, loading: false };

    default:
      return state;
  }
};

export default userReducer;


export const getUserProfile = state => state.user.profile;
export const getUserLoading = state => state.user.loading;
export const getUserError = state => state.user.error;
.profile-container {
  max-width: 600px;
  margin: 40px auto;
  padding: 20px;
  background: #fdfdfd;
  border-radius: 12px;
  box-shadow: 0 0 10px rgba(0,0,0,0.08);
}

.profile-title {
  text-align: center;
  margin-bottom: 20px;
  color: #333;
}

.profile-form {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.form-row {
  display: flex;
  flex-direction: column;
}

.form-row label {
  margin-bottom: 4px;
  font-weight: bold;
  color: #444;
}

.form-row input {
  padding: 8px 10px;
  border: 1px solid #ccc;
  border-radius: 6px;
  font-size: 14px;
}

.update-btn {
  background-color: #4a90e2;
  color: white;
  padding: 10px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
}

.update-btn:hover {
  background-color: #3d7fd6;
}

.error-msg {
  color: red;
  text-align: center;
}

.loading-msg {
  color: #555;
  text-align: center;
}
