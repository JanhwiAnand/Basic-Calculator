package com.example.ems.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;
import java.time.LocalDateTime; // Add this import

import com.example.ems.enums.LeaveStatus;
import com.fasterxml.jackson.annotation.JsonBackReference;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class LeaveRequest {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    @JsonBackReference
    private User user;

    private LocalDate startDate;

    private LocalDate endDate;

    private String reason;

    @Enumerated(EnumType.STRING)
    private LeaveStatus status;

    @Column(name = "created_at", nullable = false) // Add this field
    private LocalDateTime createdAt;

    @Column(nullable = false) // Added this field
    private String category;

    @PrePersist // Automatically set createdAt before saving
    protected void onCreate() {
        createdAt = LocalDateTime.now();
    }
}package com.example.ems.dto;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import java.time.LocalDate;

public record LeaveRequestDto(
        @NotBlank(message = "Employee email is required") String employeeEmail,
        @NotNull(message = "Start date is required") LocalDate startDate,
        @NotNull(message = "End date is required") LocalDate endDate,
        @NotBlank(message = "Reason is required") String reason,
        @NotBlank(message = "Category is required") String category
        
) {}
export const applyLeave = (leaveData, token) => async dispatch => {
  dispatch({ type: APPLY_LEAVE_REQUEST });
  try {
    const response = await axios.post('http://localhost:5000/api/leaves/apply', leaveData, {
      headers: { Authorization: `Bearer ${token}` },
    });
    dispatch({ type: APPLY_LEAVE_SUCCESS, payload: response.data });
  } catch (error) {
    const message = error.response?.data?.errors?.[0] || 'Failed to apply leave';
    dispatch({ type: APPLY_LEAVE_FAILURE, payload: message });
    throw error;
  }
};
