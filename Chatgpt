import { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchAppliedLeavesByDateRange, fetchPendingLeaves } from '../redux/actions/leaveActions';
import { getToken, getUser, getAppliedLeavesByDateRange, getPendingLeaves, getLeaveLoading, getLeaveError } from '../redux/selectors';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { format } from 'date-fns';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';
import { FaUserPlus, FaCheck, FaHistory } from 'react-icons/fa';
import { Tooltip } from 'react-tooltip';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const Dashboard = () => {
  const dispatch = useDispatch();
  const token = useSelector(getToken);
  const user = useSelector(getUser);
  const appliedLeaves = useSelector(getAppliedLeavesByDateRange);
  const pendingLeaves = useSelector(getPendingLeaves);
  const loading = useSelector(getLeaveLoading);
  const error = useSelector(getLeaveError);

  const [dateRange, setDateRange] = useState(() => {
    const today = new Date();
    const end = new Date(today);
    const start = new Date(today);
    start.setMonth(today.getMonth() - 1);
    return [start, end];
  });
  const [startDate, endDate] = dateRange;

  useEffect(() => {
    if (token && user?.role === 'ADMIN' && startDate && endDate) {
      const formattedStartDate = format(startDate, 'yyyy-MM-dd');
      const formattedEndDate = format(endDate, 'yyyy-MM-dd');
      console.log('Fetching applied leaves for date range:', { formattedStartDate, formattedEndDate });
      dispatch(fetchAppliedLeavesByDateRange(formattedStartDate, formattedEndDate, token))
        .catch(err => {
          console.error('Error fetching applied leaves:', err.message);
        });
      dispatch(fetchPendingLeaves(token));
    }
  }, [dispatch, token, user?.role, startDate, endDate]);

  useEffect(() => {
    console.log('Applied Leaves:', appliedLeaves);
    console.log('Pending Leaves:', pendingLeaves);
  }, [appliedLeaves, pendingLeaves]);

  const categoryCounts = appliedLeaves.reduce((acc, leave) => {
    acc[leave.category] = (acc[leave.category] || 0) + 1;
    return acc;
  }, {});
  const chartData = {
    labels: Object.keys(categoryCounts),
    datasets: [
      {
        label: 'Leave Applications by Category',
        data: Object.values(categoryCounts),
        backgroundColor: ['#FF6B6B', '#4ECDC4', '#45B7D1'],
        borderColor: ['#FF6B6B', '#4ECDC4', '#45B7D1'],
        borderWidth: 1,
      },
    ],
  };
  const chartOptions = {
    responsive: true,
    plugins: {
      legend: { position: 'top' },
      title: { display: true, text: 'Leave Applications by Category' },
    },
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-100 via-purple-100 to-pink-100 p-6">
      <header className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white p-6 rounded-lg shadow-lg mb-6">
        <div className="container mx-auto flex justify-between items-center">
          <h1 className="text-3xl font-bold tracking-tight">Admin Dashboard</h1>
          <div className="flex items-center space-x-4">
            <span className="text-lg font-medium">Welcome, {user?.email}</span>
            <a
              href="/apply-leave"
              className="text-white hover:text-yellow-300 transition-colors duration-300"
              data-tooltip-id="add-user-tooltip"
              data-tooltip-content="Add New User"
            >
              <FaUserPlus size={28} />
            </a>
            <Tooltip id="add-user-tooltip" place="bottom" effect="solid" />
          </div>
        </div>
      </header>

      <main className="container mx-auto">
        {error && (
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg mb-6 animate-pulse">
            {error}
          </div>
        )}

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div className="bg-white p-6 rounded-xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 border-t-4 border-indigo-500">
            <div className="flex justify-between items-center mb-4">
              <h5 className="text-xl font-semibold text-indigo-700">Leave Applications</h5>
              <DatePicker
                selectsRange={true}
                startDate={startDate}
                endDate={endDate}
                onChange={(update) => setDateRange(update)}
                className="border border-gray-300 rounded-lg p-2 text-sm focus:ring-2 focus:ring-indigo-500 focus:outline-none"
                placeholderText="Select date range"
                maxDate={new Date()}
              />
            </div>
            <div>
              {loading ? (
                <p className="text-gray-500 italic">Loading...</p>
              ) : (
                <>
                  <h2 className="text-4xl font-bold text-indigo-600">{appliedLeaves.length}</h2>
                  <p className="text-gray-600 mt-2">
                    Applications from {startDate && format(startDate, 'MMM dd, yyyy')} to{' '}
                    {endDate && format(endDate, 'MMM dd, yyyy')}
                  </p>
                  <div className="mt-4 max-h-48 overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-300 scrollbar-track-gray-100">
                    <table className="w-full text-sm">
                      <thead className="bg-indigo-50 sticky top-0">
                        <tr>
                          <th className="p-2 text-left font-semibold text-indigo-700">Email</th>
                          <th className="p-2 text-left font-semibold text-indigo-700">Category</th>
                          <th className="p-2 text-left font-semibold text-indigo-700">Dates</th>
                          <th className="p-2 text-left font-semibold text-indigo-700">Status</th>
                        </tr>
                      </thead>
                      <tbody>
                        {appliedLeaves.length === 0 ? (
                          <tr>
                            <td colSpan="4" className="text-center p-4 text-gray-500">
                              No leave applications
                            </td>
                          </tr>
                        ) : (
                          appliedLeaves.map(leave => (
                            <tr key={leave.id} className="border-b hover:bg-indigo-50 transition-colors duration-200">
                              <td className="p-2">{leave.user?.email || 'N/A'}</td>
                              <td className="p-2">{leave.category || 'N/A'}</td>
                              <td className="p-2">
                                {format(new Date(leave.startDate), 'MMM dd')} -{' '}
                                {format(new Date(leave.endDate), 'MMM dd')}
                              </td>
                              <td className="p-2">{leave.status}</td>
                            </tr>
                          ))
                        )}
                      </tbody>
                    </table>
                  </div>
                </>
              )}
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 border-t-4 border-yellow-500">
            <div className="flex justify-between items-center mb-4">
              <h5 className="text-xl font-semibold text-yellow-700">Pending Leaves</h5>
            </div>
            <div>
              {loading ? (
                <p className="text-gray-500 italic">Loading...</p>
              ) : (
                <>
                  <h2 className="text-4xl font-bold text-yellow-600">{pendingLeaves.length}</h2>
                  <p className="text-gray-600 mt-2">Leaves awaiting approval</p>
                  <div className="mt-4 max-h-48 overflow-y-auto scrollbar-thin scrollbar-thumb-yellow-300 scrollbar-track-gray-100">
                    <table className="w-full text-sm">
                      <thead className="bg-yellow-50 sticky top-0">
                        <tr>
                          <th className="p-2 text-left font-semibold text-yellow-700">Email</th>
                          <th className="p-2 text-left font-semibold text-yellow-700">Category</th>
                          <th className="p-2 text-left font-semibold text-yellow-700">Dates</th>
                        </tr>
                      </thead>
                      <tbody>
                        {pendingLeaves.length === 0 ? (
                          <tr>
                            <td colSpan="3" className="text-center p-4 text-gray-500">
                              No pending leaves
                            </td>
                          </tr>
                        ) : (
                          pendingLeaves.map(leave => (
                            <tr key={leave.id} className="border-b hover:bg-yellow-50 transition-colors duration-200">
                              <td className="p-2">{leave.user?.email || 'N/A'}</td>
                              <td className="p-2">{leave.category || 'N/A'}</td>
                              <td className="p-2">
                                {format(new Date(leave.startDate), 'MMM dd')} -{' '}
                                {format(new Date(leave.endDate), 'MMM dd')}
                              </td>
                            </tr>
                          ))
                        )}
                      </tbody>
                    </table>
                  </div>
                </>
              )}
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 border-t-4 border-green-500">
            <div className="flex justify-between items-center mb-4">
              <h5 className="text-xl font-semibold text-green-700">Leave Categories</h5>
            </div>
            <div>
              {appliedLeaves.length > 0 ? (
                <div className="bg-gray-50 p-4 rounded-lg">
                  <Bar data={chartData} options={chartOptions} />
                </div>
              ) : (
                <p className="text-gray-500 italic">No data to display</p>
              )}
            </div>
          </div>
        </div>

        <div className="mt-6 flex flex-wrap gap-4">
          <a
            href="/approval"
            className="flex items-center px-6 py-3 bg-gradient-to-r from-green-500 to-teal-500 text-white rounded-lg shadow-md hover:from-green-600 hover:to-teal-600 transform hover:scale-105 transition-all duration-300"
          >
            <FaCheck className="mr-2" />
            Approve Leaves
          </a>
          <a
            href="/history"
            className="flex items-center px-6 py-3 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-lg shadow-md hover:from-blue-600 hover:to-indigo-600 transform hover:scale-105 transition-all duration-300"
          >
            <FaHistory className="mr-2" />
            View History
          </a>
        </div>
      </main>
    </div>
  );
};

export default Dashboard;
