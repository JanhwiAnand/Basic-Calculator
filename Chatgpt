
export const declineLeave = (leaveId, reason, token) => async dispatch => {
  dispatch({ type: 'DECLINE_LEAVE_REQUEST' });
  try {
    await axios.put(`http://localhost:5000/api/leaves/reject/${leaveId}`, { reason }, {
      headers: { Authorization: `Bearer ${token}` },
    });
    dispatch({ type: 'DECLINE_LEAVE_SUCCESS', payload: { id: leaveId } });
  } catch (error) {
    const message = error.response?.data?.errors?.[0] || error.message || 'Failed to decline leave';
    console.error('Failed to decline leave:', message);
    dispatch({ type: 'DECLINE_LEAVE_FAILURE', payload: message });
    throw error;
  }
};
};-->leaveAction(react)

const rejectLeave = asyncHandler(async (req, res) => {
  const { leaveId } = req.params;
  const { declineReason } = req.body;
  try {
    const response = await axios.put(`${env.SPRING_BOOT_API}/api/leaves/reject/${leaveId}`, {
      declineReason,
    }, {
      headers: { Authorization: req.headers.authorization },
    });
    res.status(constants.status.OK).json(response.data);
  } catch (error) {
    handleAxiosError(error, res);
  }
});->leaveController(node)

@PutMapping("/reject/{leaveId}")
    public LeaveRequest rejectLeave(@PathVariable Long leaveId, HttpServletRequest request) {
        return leaveService.rejectLeave(leaveId, request);
    }->leaveController(spring)
