import { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchAppliedLeavesByDateRange, fetchPendingLeaves } from '../redux/actions/leaveActions';
import { getToken, getUser, getAppliedLeavesByDateRange, getPendingLeaves, getLeaveLoading, getLeaveError } from '../redux/selectors';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { format } from 'date-fns';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const Dashboard = () => {
  const dispatch = useDispatch();
  const token = useSelector(getToken);
  const user = useSelector(getUser);
  const appliedLeaves = useSelector(getAppliedLeavesByDateRange);
  const pendingLeaves = useSelector(getPendingLeaves);
  const loading = useSelector(getLeaveLoading);
  const error = useSelector(getLeaveError);

  const [dateRange, setDateRange] = useState(() => {
    const end = new Date();
    const start = new Date();
    start.setMonth(end.getMonth() - 1);
    return [start, end];
  });
  const [startDate, endDate] = dateRange;

  useEffect(() => {
    if (token && user?.role === 'ADMIN') {
      const formattedStartDate = startDate ? format(startDate, 'yyyy-MM-dd') : '';
      const formattedEndDate = endDate ? format(endDate, 'yyyy-MM-dd') : '';
      dispatch(fetchAppliedLeavesByDateRange(formattedStartDate, formattedEndDate, token));
      dispatch(fetchPendingLeaves(token));
    }
  }, [dispatch, token, user?.role, startDate, endDate]);

  useEffect(() => {
    console.log('Applied Leaves:', appliedLeaves);
    console.log('Pending Leaves:', pendingLeaves);
  }, [appliedLeaves, pendingLeaves]);

  const categoryCounts = appliedLeaves.reduce((acc, leave) => {
    acc[leave.category] = (acc[leave.category] || 0) + 1;
    return acc;
  }, {});
  const chartData = {
    labels: Object.keys(categoryCounts),
    datasets: [
      {
        label: 'Leave Applications by Category',
        data: Object.values(categoryCounts),
        backgroundColor: ['#FF6B6B', '#4ECDC4', '#45B7D1'],
        borderColor: ['#FF6B6B', '#4ECDC4', '#45B7D1'],
        borderWidth: 1,
      },
    ],
  };
  const chartOptions = {
    responsive: true,
    plugins: {
      legend: { position: 'top' },
      title: { display: true, text: 'Leave Applications by Category' },
    },
  };

  return (
    <div className="container-fluid min-vh-100 bg-light">
      <header className="bg-primary text-white p-4 shadow mb-4">
        <div className="container">
          <div className="d-flex justify-content-between align-items-center">
            <h1 className="h3 mb-0">Admin Dashboard</h1>
            <div>
              <span className="me-3">Welcome, {user?.email}</span>
            </div>
          </div>
        </div>
      </header>

      <main className="container">
        {error && (
          <div className="alert alert-danger" role="alert">
            {error}
          </div>
        )}

        <div className="row g-4">
          <div className="col-md-6 col-lg-4">
            <div className="card shadow-sm h-100">
              <div className="card-header bg-info text-white d-flex justify-content-between align-items-center">
                <h5 className="mb-0">Leave Applications</h5>
                <div>
                  <DatePicker
                    selectsRange={true}
                    startDate={startDate}
                    endDate={endDate}
                    onChange={(update) => setDateRange(update)}
                    className="form-control form-control-sm"
                    placeholderText="Select date range"
                  />
                </div>
              </div>
              <div className="card-body">
                {loading ? (
                  <p className="text-muted">Loading...</p>
                ) : (
                  <>
                    <h2 className="card-title text-info">{appliedLeaves.length}</h2>
                    <p className="text-muted">
                      Applications from {startDate && format(startDate, 'MMM dd, yyyy')} to{' '}
                      {endDate && format(endDate, 'MMM dd, yyyy')}
                    </p>
                    <div className="table-responsive" style={{ maxHeight: '200px', overflowY: 'auto' }}>
                      <table className="table table-sm table-striped">
                        <thead>
                          <tr>
                            <th>Email</th>
                            <th>Category</th>
                            <th>Dates</th>
                            <th>Status</th>
                          </tr>
                        </thead>
                        <tbody>
                          {appliedLeaves.length === 0 ? (
                            <tr>
                              <td colSpan="4" className="text-center">No leave applications</td>
                            </tr>
                          ) : (
                            appliedLeaves.map(leave => (
                              <tr key={leave.id}>
                                <td>{leave.user?.email || 'N/A'}</td>
                                <td>{leave.category || 'N/A'}</td>
                                <td>
                                  {format(new Date(leave.startDate), 'MMM dd')} -{' '}
                                  {format(new Date(leave.endDate), 'MMM dd')}
                                </td>
                                <td>{leave.status}</td>
                              </tr>
                            ))
                          )}
                        </tbody>
                      </table>
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>

          <div className="col-md-6 col-lg-4">
            <div className="card shadow-sm h-100">
              <div className="card-header bg-warning text-white">
                <h5 className="mb-0">Pending Leaves</h5>
              </div>
              <div className="card-body">
                {loading ? (
                  <p className="text-muted">Loading...</p>
                ) : (
                  <>
                    <h2 className="card-title text-warning">{pendingLeaves.length}</h2>
                    <p className="text-muted">Leaves awaiting approval</p>
                    <div className="table-responsive" style={{ maxHeight: '200px', overflowY: 'auto' }}>
                      <table className="table table-sm table-striped">
                        <thead>
                          <tr>
                            <th>Email</th>
                            <th>Category</th>
                            <th>Dates</th>
                          </tr>
                        </thead>
                        <tbody>
                          {pendingLeaves.length === 0 ? (
                            <tr>
                              <td colSpan="3" className="text-center">No pending leaves</td>
                            </tr>
                          ) : (
                            pendingLeaves.map(leave => (
                              <tr key={leave.id}>
                                <td>{leave.user?.email || 'N/A'}</td>
                                <td>{leave.category || 'N/A'}</td>
                                <td>
                                  {format(new Date(leave.startDate), 'MMM dd')} -{' '}
                                  {format(new Date(leave.endDate), 'MMM dd')}
                                </td>
                              </tr>
                            ))
                          )}
                        </tbody>
                      </table>
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>

          <div className="col-md-6 col-lg-4">
            <div className="card shadow-sm h-100">
              <div className="card-header bg-success text-white">
                <h5 className="mb-0">Leave Categories</h5>
              </div>
              <div className="card-body">
                {appliedLeaves.length > 0 ? (
                  <Bar data={chartData} options={chartOptions} />
                ) : (
                  <p className="text-muted">No data to display</p>
                )}
              </div>
            </div>
          </div>
        </div>

        <div className="mt-4 d-flex flex-wrap gap-2">
          <a href="/apply-leave" className="btn btn-primary">Add New User</a>
          <a href="/approval" className="btn btn-success">Approve Leaves</a>
          <a href="/history" className="btn btn-info">View History</a>
        </div>
      </main>
    </div>
  );
};

export default Dashboard;
