const forgotPassword = asyncHandler(async (req, res) => {
  const { firstname, lastname, email } = req.body;

  if (!firstname || !lastname || !email) {
    throw new CustomError(
      constants.errorMessages.MISSING_FIELDS,
      constants.status.BAD_REQUEST
    );
  }

  try {
    const response = await axios.post(`${env.SPRING_BOOT_API}/api/auth/forgot-password`, {
      firstname,
      lastname,
      email
    });

    logger.info(`Forgot password request processed for ${email}`);

    res.status(constants.status.OK).json({
      message: response.data.message || 'Instructions sent if account exists.',
    });
  } catch (error) {
    handleAxiosError(error, res);
  }
});

validation mid
const validateForgotPassword = (req, res, next) => {
  const { firstname, lastname, email } = req.body;

  if (!firstname || !lastname || !email) {
    return res.status(400).json({ message: 'All fields are required.' });
  }

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({ message: 'Invalid email format.' });
  }

  next();
};

module.exports = {
  validateLogin,
  validateForgotPassword, // add this
};
errorMessages: {
  MISSING_FIELDS: 'Required fields are missing.',
  ...
},
status: {
  OK: 200,
  BAD_REQUEST: 400,
  ...
},
