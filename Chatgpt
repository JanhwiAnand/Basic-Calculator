1. Create Entity for Password History
java
Copy
Edit
@Entity
public class PasswordHistory {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String password;

    private LocalDateTime changedAt;

    @ManyToOne
    private User user;
}
2. Repository
java
Copy
Edit
public interface PasswordHistoryRepository extends JpaRepository<PasswordHistory, Long> {
    List<PasswordHistory> findTop6ByUserOrderByChangedAtDesc(User user);
}
3. DTO for Reset
java
Copy
Edit
public class ResetPasswordRequest {
    private String email;
    private String newPassword;
}
4. Service Logic
java
Copy
Edit
@Override
public String resetPassword(ResetPasswordRequest request) {
    User user = userRepository.findByEmail(request.getEmail())
        .orElseThrow(() -> new RuntimeException("User not found"));

    // Get last 6 passwords
    List<PasswordHistory> lastPasswords = passwordHistoryRepository
        .findTop6ByUserOrderByChangedAtDesc(user);

    // Check if new password matches any previous one
    for (PasswordHistory old : lastPasswords) {
        if (passwordEncoder.matches(request.getNewPassword(), old.getPassword())) {
            throw new IllegalArgumentException("New password must not match any of the last 6 passwords.");
        }
    }

    // Save new encoded password to user
    String encodedNew = passwordEncoder.encode(request.getNewPassword());
    user.setPassword(encodedNew);
    userRepository.save(user);

    // Add new password to history
    PasswordHistory ph = new PasswordHistory();
    ph.setUser(user);
    ph.setPassword(encodedNew);
    ph.setChangedAt(LocalDateTime.now());
    passwordHistoryRepository.save(ph);

    return "Password reset successful";
}
5. Controller
java
Copy
Edit
@PostMapping("/reset-password")
public ResponseEntity<String> resetPassword(@RequestBody ResetPasswordRequest request) {
    return ResponseEntity.ok(userService.resetPassword(request));
}
âœ… NODE.JS (Middleware)
1. Action: resetPassword.js
js
Copy
Edit
import axios from "axios";
export const resetPassword = (payload) => async (dispatch) => {
    dispatch({ type: "RESET_PASSWORD_REQUEST" });
    try {
        const res = await axios.post("http://localhost:8080/api/auth/reset-password", payload);
        dispatch({ type: "RESET_PASSWORD_SUCCESS", payload: res.data });
    } catch (err) {
        dispatch({ type: "RESET_PASSWORD_FAILURE", payload: err.response?.data || "Error" });
    }
};
2. Reducer
js
Copy
Edit
const initialState = {
    loading: false,
    message: "",
    error: null,
};

export const resetPasswordReducer = (state = initialState, action) => {
    switch (action.type) {
        case "RESET_PASSWORD_REQUEST":
            return { ...state, loading: true };
        case "RESET_PASSWORD_SUCCESS":
            return { ...state, loading: false, message: action.payload };
        case "RESET_PASSWORD_FAILURE":
            return { ...state, loading: false, error: action.payload };
        default:
            return state;
    }
};
âœ… REACT (Frontend)
1. Reset Password Form
jsx
Copy
Edit
import { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { resetPassword } from "../actions/resetPassword";

const ResetPasswordForm = () => {
    const [email, setEmail] = useState("");
    const [newPassword, setNewPassword] = useState("");
    const dispatch = useDispatch();
    const { message, error } = useSelector((state) => state.resetPassword);

    const handleSubmit = (e) => {
        e.preventDefault();
        dispatch(resetPassword({ email, newPassword }));
    };

    return (
        <form onSubmit={handleSubmit}>
            <input value={email} onChange={(e) => setEmail(e.target.value)} placeholder="Email" required />
            <input value={newPassword} onChange={(e) => setNewPassword(e.target.value)} placeholder="New Password" required type="password" />
            <button type="submit">Reset Password</button>
            {message && <p>{message}</p>}
            {error && <p style={{ color: "red" }}>{error}</p>}
        </form>
    );
};
ðŸ›¡ Password Validation (Spring & React)
Use regex or validation rules to enforce:

Minimum 8 characters

At least 1 uppercase, 1 lowercase, 1 digit, 1 special character

âœ… Summary
Part	Responsibility
Spring Boot	Store password, check last 6 history
Node.js	Middleware to connect frontend/backend
React	Form input, Redux action/reducer

Let me know if you want me to generate these files for your existing project structure or integrate this with your current Spring Boot en
