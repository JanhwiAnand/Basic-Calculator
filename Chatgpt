
const validateResetPassword = [
  body('email')
    .notEmpty()
    .withMessage('Email is required')
    .isEmail()
    .withMessage('Invalid email format')
    .matches(constants.EMAIL_REGEX)
    .withMessage('Email must end with @infinite.com'),
  body('newPassword')
    .notEmpty()
    .withMessage('New password is required')
    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{8,}$/)
    .withMessage(
      'Password must be at least 8 characters, include uppercase, lowercase, and special character'
    ),
  (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      const errorMessages = errors.array().map((error) => error.msg);
      logger.warn(`Validation failed: ${errorMessages.join(', ')}`);
      throw new CustomError(errorMessages, constants.status.BAD_REQUEST);
    }
    next();
  },
];

module.exports = {
  validateForgotPassword,
  validateLogin,
  validateLeaveRequest,
  validateLeaveId,
  validateRejectLeave,
  validateUsernameQuery,
  validateHistoryQuery,
  validateUserUpdate,
  validateResetPassword, // ✅ export it
};
✅ Step 2: Add Reset Password Route
Update your routes/authRoutes.js:

js
Copy code
const express = require('express');
const {
  login,
  forgotPassword,
  resetPassword, // ✅ controller
} = require('../controllers/authController');

const {
  validateLogin,
  validateForgotPassword,
  validateResetPassword, // ✅ validation
} = require('../middleware/validationMiddleware');

const router = express.Router();

router.post('/login', validateLogin, login);
router.post('/forgot-password', validateForgotPassword, forgotPassword);
router.post('/reset-password', validateResetPassword, resetPassword); // ✅ new

module.exports = router;
✅ Step 3: Ensure You Have Controller Logic
In controllers/authController.js (already shared before):

js
Copy code
const axios = require('axios');

exports.resetPassword = async (req, res) => {
  const { email, newPassword } = req.body;

  try {
    const springRes = await axios.post(
      'http://localhost:8080/api/auth/reset-password',
      { email, newPassword }
    );
    return res.status(springRes.status).json(springRes.data);
  } catch (err) {
    const status = err.response?.status || 500;
    const message = err.response?.data?.message || 'Password reset failed';
    return res.status(status).json({ message });
  }
};
✅ Final Checklist:
Task	Status
Email & password validations	✅
Error handling & logging	✅
Proxying to Spring Boot	✅
Password history logic	✅ (Spring Boot side)
Prevent reuse of last 6 passwords	✅ (Spring Boot side)

Let me know if you need the updated constants.js, logger.js, or want to write tests for these endpoints.










Tools



ChatGPT can make mistakes. Check important info. See Cookie 
