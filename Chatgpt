// leaveActions.js
import axios from 'axios';

export const fetchPendingLeaves = (token, page = 0, size = 10) => async dispatch => {
  dispatch({ type: 'FETCH_PENDING_LEAVES_REQUEST' });
  try {
    const response = await axios.get('http://localhost:5000/api/leaves/pending', {
      params: { page, size },
      headers: { Authorization: `Bearer ${token}` },
    });
    dispatch({ type: 'FETCH_PENDING_LEAVES_SUCCESS', payload: response.data.content });
  } catch (error) {
    const message = error.response?.data?.errors?.[0] || error.message || 'Failed to fetch pending leaves';
    dispatch({ type: 'FETCH_PENDING_LEAVES_FAILURE', payload: message });
    throw error;
  }
};

// leaveReducer.js
const initialState = {
  pendingLeaves: [],
  loading: false,
  error: null,
  // ... other state properties
};

const leaveReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'FETCH_PENDING_LEAVES_REQUEST':
      return { ...state, loading: true };
    case 'FETCH_PENDING_LEAVES_SUCCESS':
      return { ...state, loading: false, pendingLeaves: action.payload };
    case 'FETCH_PENDING_LEAVES_FAILURE':
      return { ...state, loading: false, error: action.payload };
    // ... other cases
    default:
      return state;
  }
};

export default leaveReducer;

// selectors.js
export const getPendingLeaves = state => state.leave.pendingLeaves;

// Approval.js
import { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchPendingLeaves, approveLeave, declineLeave } from '../redux/actions/leaveActions';
import { getToken, getPendingLeaves, getLeaveLoading } from '../redux/selectors';

const Approval = () => {
  const [declineReason, setDeclineReason] = useState('');
  const [selectedLeaveId, setSelectedLeaveId] = useState(null);

  const dispatch = useDispatch();
  const token = useSelector(getToken);
  const pendingLeaves = useSelector(getPendingLeaves);
  const loading = useSelector(getLeaveLoading);

  useEffect(() => {
    dispatch(fetchPendingLeaves(token));
  }, [dispatch, token]);

  const handleApprove = (leaveId) => {
    dispatch(approveLeave(leaveId, token));
  };

  const handleDecline = (leaveId) => {
    if (!declineReason) {
      alert('Please provide a reason for declining');
      return;
    }
    dispatch(declineLeave(leaveId, declineReason, token));
    setDeclineReason('');
    setSelectedLeaveId(null);
  };

  return (
    <div>
      <h2 className="text-center mb-4">Leave Approval</h2>
      <div className="card p-4">
        <h5>Pending Leave Requests</h5>
        <table className="table table-striped">
          <thead>
            <tr>
              <th>Employee Email</th>
              <th>Category</th>
              <th>Start Date</th>
              <th>End Date</th>
              <th>Reason</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {pendingLeaves.length === 0 ? (
              <tr>
                <td colSpan="6" className="text-center">No pending leave requests</td>
              </tr>
            ) : (
              pendingLeaves.map(leave => (
                <tr key={leave.id}>
                  <td>{leave.employeeEmail}</td>
                  <td>{leave.category}</td>
                  <td>{leave.startDate}</td>
                  <td>{leave.endDate}</td>
                  <td>{leave.reason}</td>
                  <td>
                    <button
                      className="btn btn-success btn-sm me-2"
                      onClick={() => handleApprove(leave.id)}
                      disabled={loading}
                    >
                      Approve
                    </button>
                    <button
                      className="btn btn-danger btn-sm"
                      onClick={() => setSelectedLeaveId(leave.id)}
                      data-bs-toggle="modal"
                      data-bs-target="#declineModal"
                      disabled={loading}
                    >
                      Decline
                    </button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Modal for Decline Reason */}
      <div className="modal fade" id="declineModal" tabIndex="-1" aria-labelledby="declineModalLabel" aria-hidden="true">
        <div className="modal-dialog">
          <div className="modal-content">
            <div className="modal-header">
              <h5 className="modal-title" id="declineModalLabel">Decline Leave</h5>
              <button type="button" className="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div className="modal-body">
              <div className="mb-3">
                <label className="form-label">Reason for Decline</label>
                <textarea
                  className="form-control"
                  value={declineReason}
                  onChange={(e) => setDeclineReason(e.target.value)}
                  required
                />
              </div>
            </div>
            <div className="modal-footer">
              <button type="button" className="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button
                type="button"
                className="btn btn-danger"
                onClick={() => handleDecline(selectedLeaveId)}
                data-bs-dismiss="modal"
              >
                Decline
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Approval;
@GetMapping("/pending")
public Page<LeaveRequest> getPendingLeaves(
        @RequestParam(defaultValue = "0") int page,
        @RequestParam(defaultValue = "10") int size) {
    logger.info("Fetching pending leaves, page: {}, size: {}", page, size);
    Pageable pageable = PageRequest.of(page, size);
    Page<LeaveRequest> allLeaves = leaveService.getAllLeaveHistory(pageable);
    List<LeaveRequest> pendingLeaves = allLeaves.getContent().stream()
            .filter(leave -> leave.getStatus() == LeaveStatus.PENDING)
            .collect(Collectors.toList());
    return new PageImpl<>(pendingLeaves, pageable, allLeaves.getTotalElements());
}
