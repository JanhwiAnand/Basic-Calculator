import { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { resetPassword } from '../redux/actions/authActions';
import { useLocation, useNavigate } from 'react-router-dom';

const ResetPasswordForm = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const [email] = useState(location.state?.email || '');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState({});

  const { loading, message, error } = useSelector((state) => state.resetPassword);

  const validate = () => {
    const errs = {};
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{8,}$/;

    if (!passwordRegex.test(newPassword)) {
      errs.newPassword =
        'Password must be at least 8 characters, include uppercase, lowercase, and special character';
    }

    if (newPassword !== confirmPassword) {
      errs.confirmPassword = 'Passwords do not match';
    }

    setErrors(errs);
    return Object.keys(errs).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (validate()) {
      dispatch(resetPassword({ email, newPassword }));
    }
  };

  useEffect(() => {
    if (message) {
      setTimeout(() => navigate('/login'), 1500);
    }
  }, [message, navigate]);

  return (
    <div className="container mt-5">
      <h3 className="text-center mb-4">Reset Password</h3>
      <form onSubmit={handleSubmit} className="w-50 mx-auto">
        <div className="mb-3">
          <label>Email</label>
          <input
            type="email"
            className="form-control"
            value={email}
            readOnly
          />
        </div>

        <div className="mb-3">
          <label>New Password</label>
          <div className="input-group">
            <input
              type={showPassword ? 'text' : 'password'}
              className="form-control"
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              required
            />
            <span
              className="input-group-text"
              onClick={() => setShowPassword(!showPassword)}
              style={{ cursor: 'pointer' }}
            >
              {showPassword ? '🙈' : '👁️'}
            </span>
          </div>
          {errors.newPassword && (
            <div className="text-danger">{errors.newPassword}</div>
          )}
        </div>

        <div className="mb-3">
          <label>Confirm Password</label>
          <input
            type={showPassword ? 'text' : 'password'}
            className="form-control"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
          />
          {errors.confirmPassword && (
            <div className="text-danger">{errors.confirmPassword}</div>
          )}
        </div>

        <button
          className="btn btn-primary w-100"
          disabled={loading || !newPassword || !confirmPassword}
        >
          {loading ? 'Resetting...' : 'Reset Password'}
        </button>

        {message && <div className="alert alert-success mt-3">{message}</div>}
        {error && <div className="alert alert-danger mt-3">{error}</div>}
      </form>
    </div>
  );
};

export default ResetPasswordForm;export const getToken = state => state.auth.token;
export const getUser = state => state.auth.user;
export const getAuthError = state => state.auth.error;
export const getAuthLoading = state => state.auth.loading;
export const getCurrentLeaves = state => state.leaves.currentLeaves;
export const getAppliedLeaves = state => state.leaves.appliedLeaves;
export const getLeaveHistory = state => state.leaves.leaveHistory || { content: [] };
export const getLeaveBalances = state => state.leaves.leaveBalances;
export const getLeaveError = state => state.leaves.error;
export const getLeaveLoading = state => state.leaves.loading;
export const getPendingLeaves = state => state.leaves.pendingLeaves;
export const getAppliedLeavesByDateRange = state => state.leaves.appliedLeavesByDateRange || [];
//for forgot password part
export const getAuthMessage=state=>state.auth.message;
// Auth Reducer: Manages authentication state
const initialState = {
  token: sessionStorage.getItem('token') || null,
  user: JSON.parse(sessionStorage.getItem('user')) || null,
  error: null,
  loading: false,
  message: null,
};

const authReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'FORGOT_PASSWORD_REQUEST':
      return { ...state, loading: true, error: null };

    case 'FORGOT_PASSWORD_SUCCESS':
      return { ...state, loading: false, message: action.payload.message,verifiedEmail:action.payload.email };

    case 'FORGOT_PASSWORD_FAILURE':
      return { ...state, loading: false, error: action.payload };

    case 'RESET_PASSWORD_REQUEST':
      return { ...state, loading: true, message: null, error: null };
    case 'RESET_PASSWORD_SUCCESS':
      return { ...state, loading: false, message: action.payload };
    case 'RESET_PASSWORD_FAILURE':
      return { ...state, loading: false, error: action.payload };

    case 'LOGIN_REQUEST':
      return { ...state, loading: true, error: null };
    case 'LOGIN_SUCCESS':
      sessionStorage.setItem('token', action.payload.token);
      sessionStorage.setItem('user', JSON.stringify(action.payload.user));
      return { ...state, token: action.payload.token, user: action.payload.user, loading: false };
    case 'LOGIN_FAILURE':
      return { ...state, error: action.payload, loading: false };
    case 'LOGOUT':
      sessionStorage.removeItem('token');
      sessionStorage.removeItem('user');
      return { ...state, token: null, user: null };
    default:
      return state;
  }
};

export default authReducer;// Auth Actions: Handles login and logout
import axios from 'axios';

export const LOGIN_REQUEST = 'LOGIN_REQUEST';
export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';
export const LOGIN_FAILURE = 'LOGIN_FAILURE';

//for forgot password things
export const FORGOT_PASSWORD_REQUEST='FORGOT_PASSWORD_REQUEST';
export const FORGOT_PASSWORD_SUCCESS='FORGOT_PASSWORD_SUCCESS';
export const FORGOT_PASSWORD_FAILURE='FORGOT_PASSWORD_FAILURE';

//for reset password
export const RESET_PASSWORD_REQUEST = 'RESET_PASSWORD_REQUEST';
export const RESET_PASSWORD_SUCCESS = 'RESET_PASSWORD_SUCCESS';
export const RESET_PASSWORD_FAILURE = 'RESET_PASSWORD_FAILURE';

//for logout page
export const LOGOUT = 'LOGOUT';

export const forgotPassword = (firstname, lastname, email) => async dispatch => {
    console.log(firstname,lastname,email)
  dispatch({ type: FORGOT_PASSWORD_REQUEST });
  console.log(firstname,lastname,email)
  try {
    const response = await axios.post('http://localhost:5000/api/auth/forgot-password', {
      firstname,
      lastname,
      email
    });
    // console.log(response)
    dispatch({ type: FORGOT_PASSWORD_SUCCESS, payload: response.data.message });
    return true;
  } catch (error) {
    dispatch({
      type: FORGOT_PASSWORD_FAILURE,
      payload: error.response?.data?.message || 'Request failed',
    });
  }
};
export const resetPassword = ({email,newPassword}) => async dispatch => {
  dispatch({ type: RESET_PASSWORD_REQUEST });
  try {
    const response = await axios.post('http://localhost:5000/api/auth/reset-password', {
      email,
      newPassword
    });
    dispatch({ type: RESET_PASSWORD_SUCCESS, payload: response.data.message });
  } catch (error) {
    dispatch({
      type: RESET_PASSWORD_FAILURE,
      payload: error.response?.data?.message || 'Reset failed',
    });
  }
};

export const login = (email, password) => async dispatch => {
    dispatch({ type: LOGIN_REQUEST });
    try {
        sessionStorage.removeItem('token');
        const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });
        sessionStorage.setItem('token', response.data.accessToken);//token is a key whose value is comming in response
        dispatch({ type: LOGIN_SUCCESS, payload: { token: response.data.accessToken, user: response.data.user } });
        return response.data;
    } catch (error) {
        const message = error.response?.data?.errors?.[0] || 'Login failed';
        dispatch({ type: LOGIN_FAILURE, payload: message });
        throw error;
    }
};

export const logout = () => (dispatch) => {
    sessionStorage.removeItem('token');
    dispatch({ type: LOGOUT });
};

export const loginSuccess = (payload) => ({
    type: LOGIN_SUCCESS,
    payload,
});
