

const userReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'ADD_USER_REQUEST':
      return { ...state, loading: true, error: null };
    case 'ADD_USER_SUCCESS':
      return { ...state, users: [...state.users, action.payload], loading: false };
    case 'ADD_USER_FAILURE':
      return { ...state, error: action.payload, loading: false };

    case 'UPDATE_USER_REQUEST':
      return { ...state, updateLoading: true, updateError: null, updateSuccess: false };
    case 'UPDATE_USER_SUCCESS':
      return {
        ...state,
        updateLoading: false,
        updateSuccess: true,
        currentUser: action.payload,
        error: null,
      };
    case 'UPDATE_USER_FAILURE':
      return {
        ...state,
        updateLoading: false,
        updateError: action.payload,
        updateSuccess: false,
      };

    case 'SET_CURRENT_USER':
      return { ...state, currentUser: action.payload };

    default:
      return state;
  }
};

export default userReducer;


export const getCurrentUser = (state) => state.user.currentUser;

export const getUserUpdateLoading = (state) => state.user.updateLoading;

export const getUserUpdateError = (state) => state.user.updateError;

export const getUserUpdateSuccess = (state) => state.user.updateSuccess;



import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import {
  getCurrentUser,
  getUserUpdateLoading,
  getUserUpdateError,
  getUserUpdateSuccess,
} from '../redux/selectors';
import { fetchUserProfile, updateUserProfile } from '../redux/actions/userActions';

const Profile = () => {
  const dispatch = useDispatch();

  // Selectors
  const user = useSelector(getCurrentUser);
  const loading = useSelector(getUserUpdateLoading);
  const error = useSelector(getUserUpdateError);
  const updateSuccess = useSelector(getUserUpdateSuccess);

  // Local state for edit form
  const [formData, setFormData] = useState({
    email: '',
    firstname: '',
    lastname: '',
    role: '',
    city: '',
    state: '',
    country: '',
    phnno: '',
  });

  useEffect(() => {
    dispatch(fetchUserProfile());
  }, [dispatch]);

  useEffect(() => {
    if (user) {
      setFormData({
        email: user.email || '',
        firstname: user.firstname || '',
        lastname: user.lastname || '',
        role: user.role || '',
        city: user.city || '',
        state: user.state || '',
        country: user.country || '',
        phnno: user.phnno || '',
      });
    }
  }, [user]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    dispatch(updateUserProfile(formData));
  };

  return (
    <div className="profile-container">
      <h2 className="profile-title">My Profile</h2>

      {loading && <div className="info-message">Updating profile...</div>}
      {error && <div className="error-message">{error}</div>}
      {updateSuccess && <div className="success-message">Profile updated successfully!</div>}

      <form onSubmit={handleSubmit} className="profile-form">
        <div className="form-row">
          <label>Email (cannot edit):</label>
          <input type="email" name="email" value={formData.email} disabled />
        </div>

        <div className="form-row">
          <label>First Name:</label>
          <input name="firstname" value={formData.firstname} onChange={handleChange} required />
        </div>

        <div className="form-row">
          <label>Last Name:</label>
          <input name="lastname" value={formData.lastname} onChange={handleChange} required />
        </div>

        <div className="form-row">
          <label>Role:</label>
          <input name="role" value={formData.role} onChange={handleChange} disabled />
        </div>

        <div className="form-row">
          <label>Phone Number:</label>
          <input
            name="phnno"
            value={formData.phnno}
            onChange={handleChange}
            maxLength={12}
            type="tel"
          />
        </div>

        <div className="form-row">
          <label>City:</label>
          <input name="city" value={formData.city} onChange={handleChange} />
        </div>

        <div className="form-row">
          <label>State:</label>
          <input name="state" value={formData.state} onChange={handleChange} />
        </div>

        <div className="form-row">
          <label>Country:</label>
          <input name="country" value={formData.country} onChange={handleChange} />
        </div>

        <button type="submit" className="btn-update" disabled={loading}>
          Update Profile
        </button>
      </form>

      <style jsx>{`
        .profile-container {
          max-width: 500px;
          margin: 2rem auto;
          padding: 2rem;
          background: #fff;
          box-shadow: 0 0 15px rgba(0,0,0,0.1);
          border-radius: 8px;
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .profile-title {
          text-align: center;
          margin-bottom: 1.5rem;
          color: #2c3e50;
        }
        .profile-form {
          display: flex;
          flex-direction: column;
          gap: 1rem;
        }
        .form-row {
          display: flex;
          flex-direction: column;
        }
        label {
          margin-bottom: 0.3rem;
          font-weight: 600;
          color: #34495e;
        }
        input {
          padding: 0.5rem 0.75rem;
          border: 1.5px solid #bdc3c7;
          border-radius: 4px;
          font-size: 1rem;
          transition: border-color 0.3s ease;
        }
        input:focus {
          outline: none;
          border-color: #3498db;
          box-shadow: 0 0 5px #3498db;
        }
        input[disabled] {
          background: #ecf0f1;
          cursor: not-allowed;
        }
        .btn-update {
          background-color: #2980b9;
          color: white;
          border: none;
          padding: 0.75rem 1rem;
          border-radius: 5px;
          font-size: 1.1rem;
          cursor: pointer;
          transition: background-color 0.3s ease;
        }
        .btn-update:hover:not(:disabled) {
          background-color: #3498db;
        }
        .btn-update:disabled {
          background-color: #7f8c8d;
          cursor: not-allowed;
        }
        .info-message {
          text-align: center;
          margin-bottom: 1rem;
          color: #2980b9;
          font-weight: 600;
        }
        .error-message {
          text-align: center;
          margin-bottom: 1rem;
          color: #c0392b;
          font-weight: 600;
        }
        .success-message {
          text-align: center;
          margin-bottom: 1rem;
          color: #27ae60;
          font-weight: 600;
        }
      `}</style>
    </div>
  );
};

export default Profile;
