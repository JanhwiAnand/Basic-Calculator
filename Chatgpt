//leave routes
const express = require('express');
const router = express.Router();
const { authMiddleware } = require('../middleware/authMiddleware');
const {
  validateLeaveRequest,
  validateLeaveId,
  validateRejectLeave,
  validateUsernameQuery,
} = require('../middleware/validationMiddleware');
const {
  applyLeave,
  cancelLeave,
  getCurrentLeaves,
  getPendingLeaves,
  approveLeave,
  rejectLeave,
  getLeaveHistory,
  getLeavesByDateRange, // Add this
} = require('../controllers/leaveController');

router.post('/apply', authMiddleware, validateLeaveRequest, applyLeave);
router.delete('/:id', authMiddleware, validateLeaveId, cancelLeave);
router.get('/current', authMiddleware, getCurrentLeaves);
router.get('/pending', authMiddleware, getPendingLeaves);
router.put('/approve/:leaveId', authMiddleware, validateLeaveId, approveLeave);
router.put('/reject/:leaveId', authMiddleware, validateLeaveId, validateRejectLeave, rejectLeave);
router.get('/history', authMiddleware, getLeaveHistory);
router.get('/applied', authMiddleware, getLeavesByDateRange); // Add this

module.exports = router;

//at end add this in leave contoller:-
const getLeavesByDateRange = asyncHandler(async (req, res) => {
  const { startDate, endDate } = req.query;
  try {
    if (!startDate || !endDate) {
      throw new CustomError('startDate and endDate are required', constants.status.BAD_REQUEST);
    }
    const response = await axios.get(`${env.SPRING_BOOT_API}/api/leaves/applied`, {
      params: { startDate, endDate },
      headers: { Authorization: req.headers.authorization },
    });
    res.status(constants.status.OK).json(response.data);
  } catch (error) {
    handleAxiosError(error, res);
  }
});
module.exports = {
  applyLeave,
  cancelLeave,
  getCurrentLeaves,
  getPendingLeaves,
  approveLeave,
  rejectLeave,
  getLeaveHistory,
  getLeavesByDateRange, // Add this
};

