//node:-
import axios from 'axios';

export const deleteTask = async (taskId, token, userId) => {
  const authToken = token || localStorage.getItem('jwtToken');
  const user = userId || localStorage.getItem('userId');

  if (!authToken || !user) {
    console.error("Token or User ID is missing, cannot proceed.");
    return;
  }

  try {
    const response = await axios.delete(`http://localhost:3001/api/tasks/${taskId}`, {
      headers: {
        Authorization: `Bearer ${authToken}`,
        "User-Id": user,
      },
    });

    console.log("React DELETE Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("React DELETE Error:", error.response?.data || error.message);
  }
};

react:-
app.delete('/api/tasks/:taskId', authenticateToken, async (req, res) => {
  try {
    const taskId = req.params.taskId;
    const userId = req.user.userId;

    if (!taskId || isNaN(taskId)) {
      return res.status(400).json({ error: "Invalid task ID received." });
    }

    const headers = {
      Authorization: req.headers.authorization,
      "User-Id": userId.toString(),
      "Content-Type": "application/json",
    };

    const response = await axios.delete(`http://localhost:8080/api/tasks/${taskId}`, {
      headers,
    });

    res.status(response.status).json(response.data);
  } catch (error) {
    console.error("Node DELETE Error:", error?.response?.data || error.message);
    res.status(500).json({ error: error?.response?.data || "Task deletion failed" });
  }
});

spring :-
@DeleteMapping("/{taskId}")
public ResponseEntity<?> deleteTask(
        @PathVariable Long taskId,
        @RequestHeader("User-Id") Long userId) {

    System.out.println("Raw Task ID Received: " + taskId);
    System.out.println("Raw User ID Received: " + userId);

    taskService.deleteTask(taskId); // <-- Ensure this method is implemented properly

    System.out.println("Task Deleted Successfully: Task ID " + taskId);
    return ResponseEntity.ok("Task deleted successfully!");
}
