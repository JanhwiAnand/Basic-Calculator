        @Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    public boolean validateUserForPasswordReset(ForgotPasswordRequest request) {
        return userRepository.findByEmail(request.getEmail())
                .filter(user -> user.getFirstName().equalsIgnoreCase(request.getFirstName()) &&
                                user.getLastName().equalsIgnoreCase(request.getLastName()))
                .isPresent();
    }

    // Optional: generate token & send email or allow reset directly
}

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserService userService;

    @PostMapping("/forgot-password")
    public ResponseEntity<String> forgotPassword(@RequestBody ForgotPasswordRequest request) {
        boolean valid = userService.validateUserForPasswordReset(request);
        if (valid) {
            return ResponseEntity.ok("User verified. You may reset password.");
        } else {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("User details not found or incorrect.");
        }
    }
}
