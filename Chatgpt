package com.example.ems.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;
import java.time.LocalDate;
import java.util.ArrayList;
import com.example.ems.enums.Role;
import com.fasterxml.jackson.annotation.JsonManagedReference;

// Entity representing a user (employee or admin) in the leave management system
@Entity
@Data
@NoArgsConstructor
public class User {
    // Unique identifier for the user
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    //User's firstname
    @Column(nullable=false)
    private String firstname;
    
    //User's lastname
    @Column(nullable=false)
    private String lastname;
    
    //Phone number
    @Column(nullable=false)
    private String phnno;
    
    //Date of joining
    @Column(nullable=false)
    private LocalDate date_of_joining;
    
    // User's email, acts as username, must be unique and non-null
    @Column(unique = true, nullable = false)
    private String email;

    // User's password, non-null
    @Column(nullable = false)
    private String password;
    
    //User's city
    @Column(nullable=false)
    private String city;
    
    //User's department
    @Column(nullable=false)
    private String department;
    
    //User's country
    @Column(nullable=false)
    private String country;
    
    //User's state
    @Column(nullable=false)
    private String state;
    
    //User's role (EMPLOYEE or ADMIN)
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Role role;
    
    // One-to-many relationship with leave requests
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonManagedReference //added in parent side to avoid circular loop
    private List<LeaveRequest> leaveRequests=new ArrayList<>();
}package com.example.ems.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;
import java.time.LocalDateTime; // Add this import

import com.example.ems.enums.LeaveStatus;
import com.fasterxml.jackson.annotation.JsonBackReference;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class LeaveRequest {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "user_id", nullable = false)
    @JsonBackReference
    private User user;

    private LocalDate startDate;

    private LocalDate endDate;

    private String reason;

    @Enumerated(EnumType.STRING)
    private LeaveStatus status;

    @Column(name = "created_at", nullable = false) // Add this field
    private LocalDateTime createdAt;

    @Column(nullable = false) // Added this field
    private String category;

    @PrePersist // Automatically set createdAt before saving
    protected void onCreate() {
        createdAt = LocalDateTime.now();
    }
}

//dto
package com.example.ems.dto;

import java.time.LocalDate;

import com.example.ems.enums.Role;

import jakarta.persistence.Column;
import jakarta.validation.constraints.Digits;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Pattern;

// DTO for capturing user input during registration, using Java 21 record for immutability
public record UserDto(
        // User's email, acts as username, must be valid and non-blank
        @NotBlank(message = "Email is required")
        @Email(message = "Invalid email format")
        String email,

        // User's password, must meet strength requirements
        @NotBlank(message = "Password is required")
        @Pattern(regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$",
                message = "Password must be at least 8 characters, include uppercase, lowercase, number, and special character")
        String password,
        
        @NotBlank(message="First name is required")
        String firstname,
     
        @NotBlank(message="Last name is required")
        String lastname,
        
        @NotBlank(message="Phone number is required")
        @Pattern(regexp ="^[0-9]{10,12}$",message="Phone number must be 10-12 digits")
        String phnno,
        
        @NotNull(message="Date of joining is required")
        @PastOrPresent(message="Date of joining cannot be in the future")
        LocalDate date_of_joining,
        
        @NotBlank(message="city is required")
        String city,
        
        @NotBlank(message="Department is required")
        String department,
        
        @NotBlank(message="Country is required")
        String country,
        
        @NotBlank(message="State is required")
        String state,
        
        // User's role (EMPLOYEE or ADMIN), must not be null
        @NotNull(message = "Role is required")
        Role role
) {}
package com.example.ems.dto;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import java.time.LocalDate;

public record LeaveRequestDto(
        @NotBlank(message = "Employee email is required") String employeeEmail,
        @NotNull(message = "Start date is required") LocalDate startDate,
        @NotNull(message = "End date is required") LocalDate endDate,
        @NotBlank(message = "Reason is required") String reason,
        @NotBlank(message = "Category is required") String category
) {}
