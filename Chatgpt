String firstname = requestDTO.getFirstname();
    String lastname = requestDTO.getLastname();
    String email = requestDTO.getEmail();

    Optional<User> userOptional = userRepository.findByFirstnameAndLastnameAndEmail(firstname, lastname, email);

    if (userOptional.isPresent()) {
        // You can log or trigger a token flow here if needed
        return ResponseEntity.ok().body(Collections.singletonMap("message", "User verified. Proceed to reset password."));
    } else {
        return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body(Collections.singletonMap("error", "User not found with provided details."));
    }
}
 @PostMapping("/forgot-password")
    public ResponseEntity<String> forgotPassword(@RequestBody ForgotPasswordRequest request) {
        boolean valid = userService.validateUserForPasswordReset(request);
        if (valid) {
            return ResponseEntity.ok("User verified. You may reset password.");
        } else {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("User details not found or incorrect.");
        }
}
package com.example.ems.service;

import com.example.ems.dto.ForgotPasswordRequest;
import com.example.ems.dto.UserDto;
import com.example.ems.entity.User;
import com.example.ems.repository.UserRepository;

import lombok.RequiredArgsConstructor;

import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

@Service
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {
    private final UserRepository userRepository;
    private final BCryptPasswordEncoder passwordEncoder;
    private static final Logger logger = LoggerFactory.getLogger(UserServiceImpl.class);
    private static final String PASSWORD_PATTERN = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$";

    @Override
    public User createUser(UserDto userDto) {
        logger.info("Creating user with email: {}", userDto.email());
        if (!userDto.email().endsWith("@infinite.com")) {
            logger.error("Invalid email domain for user: {}", userDto.email());
            throw new IllegalArgumentException("Email must belong to the infinite.com domain");
        }

        String password = userDto.password();
        if (!password.matches(PASSWORD_PATTERN)) {
            logger.error("Invalid password for user: {}", userDto.email());
            throw new IllegalArgumentException("Password must be at least 8 characters long, contain at least one uppercase letter, one lowercase letter, one digit, and one special character (@$!%*?&)");
        }

        User user = new User();
        user.setEmail(userDto.email());
        user.setPassword(passwordEncoder.encode(password));
        user.setRole(userDto.role());
        user.setFirstname(userDto.firstname());
        user.setLastname(userDto.lastname());
        user.setCity(userDto.city());
        user.setState(userDto.state());
        user.setCountry(userDto.country());
        user.setDate_of_joining(userDto.date_of_joining());
        user.setDepartment(userDto.department());
        user.setPhnno(userDto.phnno());
        return userRepository.save(user);
    }

    @Override
    public User getUserByEmail(String email) {
        return userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("User not found with email: " + email));
    }

    @Override
    public User updateUser(User user) {
        logger.info("Updating user with email: {}", user.getEmail());
        if (!user.getEmail().endsWith("@infinite.com")) {
            logger.error("Invalid email domain for user: {}", user.getEmail());
            throw new IllegalArgumentException("Email must belong to the infinite.com domain");
        }

        if (user.getPassword() != null && !user.getPassword().isEmpty()) {
            if (!user.getPassword().matches(PASSWORD_PATTERN)) {
                logger.error("Invalid password for user: {}", user.getEmail());
                throw new IllegalArgumentException("Password must be at least 8 characters long, contain at least one uppercase letter, one lowercase letter, one digit, and one special character (@$!%*?&)");
            }
            user.setPassword(passwordEncoder.encode(user.getPassword()));
        }

        return userRepository.save(user);
    }
    //forgot-password
    public boolean validateUserForPasswordReset(ForgotPasswordRequest request) {
    	Optional<User> useropt=userRepository.findByEmail(request.getEmail());
    	if(useropt.isEmpty()) {
    		logger.warn("No user found wuth email {}",request.getEmail());
    		throw new ResponseStatusException(HttpStatus.NOT_FOUND,"User Not Found");
    	}
        return userRepository.findByEmail(request.getEmail())
               .filter(user -> user.getFirstname().equalsIgnoreCase(request.getFirstname()) &&
                                user.getLastname().equalsIgnoreCase(request.getLastname()))
               .isPresent();
   }

	@Override
	public User resetPassword(ForgotPasswordRequest request) {
		// TODO Auto-generated method stub
		return null;
	}

  
}

