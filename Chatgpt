.add-employee-container {
  max-width: 800px;
  margin: 40px auto;
  padding: 30px;
  border-radius: 15px;
  background-color: #ffffff;
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
}

.add-employee-title {
  text-align: center;
  margin-bottom: 25px;
  font-size: 28px;
  font-weight: bold;
  color: #333;
}

.add-employee-form {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  justify-content: space-between;
}

.add-employee-field {
  width: 48%;
  display: flex;
  flex-direction: column;
}

.add-employee-field-full {
  width: 100%;
}

.add-employee-label {
  font-weight: 600;
  margin-bottom: 5px;
  color: #444;
}

.add-employee-input,
.add-employee-select {
  padding: 10px;
  border-radius: 8px;
  border: 1px solid #ccc;
  font-size: 15px;
}

.add-employee-input:focus,
.add-employee-select:focus {
  outline: none;
  border-color: #007bff;
}

.add-employee-error {
  color: red;
  font-size: 13px;
  margin-top: 5px;
}

.add-employee-button-container {
  width: 100%;
  text-align: center;
  margin-top: 30px;
}

.add-employee-button {
  background-color: #007bff;
  color: white;
  padding: 12px 30px;
  border: none;
  border-radius: 10px;
  font-weight: 600;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.add-employee-button:hover {
  background-color: #0056b3;
}

.add-employee-password-toggle {
  position: absolute;
  right: 15px;
  top: 38px;
  cursor: pointer;
}

/* ðŸ“± Responsive: stack fields on small screens */
@media screen and (max-width: 768px) {
  .add-employee-field {
    width: 100%;
  }
}
import React, { useState } from 'react';
import './AddEmployeeCustom.css';
import { useDispatch, useSelector } from 'react-redux';
import { getToken } from '../redux/selectors';
import { addUser } from '../redux/actions/userActions';
import { Eye, EyeOff } from 'lucide-react';

const departments = ['HR', 'Development', 'Marketing', 'Finance', 'Production', 'Devops'];
const states = [
  'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh',
  'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jharkhand',
  'Karnataka', 'Kerala', 'Madhya Pradesh', 'Maharashtra', 'Manipur',
  'Meghalaya', 'Mizoram', 'Nagaland', 'Odisha', 'Punjab',
  'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana', 'Tripura',
  'Uttar Pradesh', 'Uttarakhand', 'West Bengal', 'Delhi', 'Jammu and Kashmir'
];

const AddEmployee = () => {
  const dispatch = useDispatch();
  const token = useSelector(getToken);

  const [employee, setEmployee] = useState({
    email: '', firstname: '', lastname: '', department: '', phnno: '',
    country: '', state: '', city: '', date_of_joining: '',
    password: '', confirmPassword: '', role: 'EMPLOYEE'
  });

  const [errors, setErrors] = useState({});
  const [addUserLoading, setAddUserLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [passwordStrength, setPasswordStrength] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEmployee((prev) => ({ ...prev, [name]: value }));
    validateField(name, value);
    if (name === 'password') validateField('confirmPassword', employee.confirmPassword);
    if (name === 'confirmPassword') validateField('confirmPassword', value);
  };

  const validateField = (name, value) => {
    let error = '';
    switch (name) {
      case 'email':
        if (!value.endsWith('@infinite.com') || value.length > 100) error = 'Email must end with @infinite.com and be less than 100 chars.';
        break;
      case 'phnno':
        if (!/^\d{1,12}$/.test(value)) error = 'Mobile number must be up to 12 digits only.';
        break;
      case 'firstname':
      case 'lastname':
        if (!/^[a-zA-Z]+$/.test(value)) error = 'Name must contain only letters.';
        break;
      case 'password': {
        const hasLower = /[a-z]/.test(value);
        const hasUpper = /[A-Z]/.test(value);
        const hasDigit = /\d/.test(value);
        const hasSpecial = /[@$!%*?&]/.test(value);
        const length = value.length;
        const strengthCount = [hasLower, hasUpper, hasDigit, hasSpecial].filter(Boolean).length;
        setPasswordStrength(strengthCount === 4 && length >= 8 ? 'Strong' : strengthCount >= 2 && length >= 6 ? 'Moderate' : 'Weak');
        if (!(hasLower && hasUpper && hasDigit && hasSpecial && length >= 8)) {
          error = 'Password must be 8+ chars, include uppercase, lowercase, number, special char.';
        }
        break;
      }
      case 'confirmPassword':
        if (value !== employee.password) error = 'Confirm password must match the password.';
        break;
      default:
        if (!value.trim()) error = 'This field is required.';
    }
    setErrors((prev) => ({ ...prev, [name]: error }));
  };

  const isFormValid = () => {
    let valid = true;
    const newErrors = {};
    Object.entries(employee).forEach(([field, value]) => {
      validateField(field, value);
      if (errors[field]) valid = false;
    });
    return valid;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!isFormValid()) return;
    setAddUserLoading(true);
    try {
      const { confirmPassword, ...userWithoutConfirm } = employee;
      await dispatch(addUser(userWithoutConfirm, token));
      alert('User added successfully!');
      setEmployee({ email: '', firstname: '', lastname: '', department: '', phnno: '', country: '', state: '', city: '', date_of_joining: '', password: '', confirmPassword: '', role: 'EMPLOYEE' });
      setErrors({});
      setPasswordStrength('');
    } catch (error) {
      alert(error.message || 'Failed to add user');
    } finally {
      setAddUserLoading(false);
    }
  };

  const today = new Date().toISOString().split('T')[0];

  return (
    <div className="add-employee-wrapper">
      <div className="add-employee-card">
        <h3 className="add-employee-title">Add Employee</h3>
        <form onSubmit={handleSubmit} className="add-employee-form">
          {Object.entries({
            email: 'Email',
            phnno: 'Mobile No',
            firstname: 'First Name',
            lastname: 'Last Name',
            department: 'Department',
            country: 'Country',
            state: 'State',
            city: 'City',
            date_of_joining: 'Date of Joining',
            password: 'Password',
            confirmPassword: 'Confirm Password',
          }).map(([name, label]) => (
            <div className="add-employee-field" key={name}>
              <label>{label}</label>
              {name === 'department' || name === 'state' ? (
                <select name={name} value={employee[name]} onChange={handleChange}>
                  <option value="">Select {label}</option>
                  {(name === 'department' ? departments : states).map((val) => (
                    <option key={val} value={val}>{val}</option>
                  ))}
                </select>
              ) : name === 'password' || name === 'confirmPassword' ? (
                <div className="add-employee-password-field">
                  <input
                    type={name === 'password' ? (showPassword ? 'text' : 'password') : (showConfirmPassword ? 'text' : 'password')}
                    name={name}
                    value={employee[name]}
                    onChange={handleChange}
                  />
                  <span
                    onClick={() => name === 'password' ? setShowPassword(!showPassword) : setShowConfirmPassword(!showConfirmPassword)}
                    className="add-employee-eye"
                  >
                    {name === 'password' ? (showPassword ? <EyeOff size={16} /> : <Eye size={16} />) : (showConfirmPassword ? <EyeOff size={16} /> : <Eye size={16} />)}
                  </span>
                </div>
              ) : (
                <input
                  type={name === 'date_of_joining' ? 'date' : 'text'}
                  name={name}
                  min={name === 'date_of_joining' ? today : undefined}
                  value={employee[name]}
                  onChange={handleChange}
                />
              )}
              {errors[name] && <div className="add-employee-error">{errors[name]}</div>}
              {name === 'password' && passwordStrength && (
                <div className={`add-employee-strength ${passwordStrength.toLowerCase()}`}>Strength: {passwordStrength}</div>
              )}
            </div>
          ))}
          <div className="add-employee-submit">
            <button type="submit" disabled={addUserLoading}>
              {addUserLoading ? 'Adding...' : 'Add User'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddEmployee;
