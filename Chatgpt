import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { getUser, getAuthLoading, getAuthError } from '../redux/selectors';
import { updateUserProfile } from '../redux/actions/userActions'; // You'll create this
import './Profile.css'; // We'll add CSS here

const Profile = () => {
  const user = useSelector(getUser);
  const loading = useSelector(getAuthLoading);
  const error = useSelector(getAuthError);
  const dispatch = useDispatch();

  const [form, setForm] = useState({
    firstname: '',
    lastname: '',
    role: '',
    phnno: '',
    department: '',
    date_of_joining: '',
    city: '',
    state: '',
    country: '',
  });

  const [errors, setErrors] = useState({});

  useEffect(() => {
    if (user) {
      setForm({
        firstname: user.firstname || '',
        lastname: user.lastname || '',
        role: user.role || '',
        phnno: user.phnno || '',
        department: user.department || '',
        date_of_joining: user.date_of_joining ? user.date_of_joining.split('T')[0] : '',
        city: user.city || '',
        state: user.state || '',
        country: user.country || '',
      });
    }
  }, [user]);

  const validate = () => {
    let tempErrors = {};
    if (!form.firstname.trim()) tempErrors.firstname = 'First name is required';
    if (!form.lastname.trim()) tempErrors.lastname = 'Last name is required';
    if (!form.phnno.match(/^\d{10,12}$/)) tempErrors.phnno = 'Phone must be 10-12 digits';
    if (!form.department.trim()) tempErrors.department = 'Department is required';
    if (!form.date_of_joining) tempErrors.date_of_joining = 'Joining date required';
    if (!form.city.trim()) tempErrors.city = 'City is required';
    if (!form.state.trim()) tempErrors.state = 'State is required';
    if (!form.country.trim()) tempErrors.country = 'Country is required';
    setErrors(tempErrors);
    return Object.keys(tempErrors).length === 0;
  };

  const handleChange = e => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = e => {
    e.preventDefault();
    if (!validate()) return;

    // Prepare userDto format similar to backend
    const updatedUser = {
      ...user,
      firstname: form.firstname,
      lastname: form.lastname,
      role: form.role,
      phnno: form.phnno,
      department: form.department,
      date_of_joining: form.date_of_joining,
      city: form.city,
      state: form.state,
      country: form.country,
    };

    dispatch(updateUserProfile(updatedUser)); // Dispatch action to update profile
  };

  return (
    <div className="profile-container">
      <h2 className="profile-title">My Profile</h2>
      <form className="profile-form" onSubmit={handleSubmit} noValidate>
        <div className="form-row">
          <label>Email (readonly)</label>
          <input type="email" value={user.email} disabled />
        </div>
        <div className="form-row">
          <label>Role</label>
          <input type="text" name="role" value={form.role} onChange={handleChange} disabled />
        </div>
        <div className="form-row">
          <label>First Name</label>
          <input
            type="text"
            name="firstname"
            value={form.firstname}
            onChange={handleChange}
            className={errors.firstname ? 'error-input' : ''}
          />
          {errors.firstname && <small className="error-text">{errors.firstname}</small>}
        </div>
        <div className="form-row">
          <label>Last Name</label>
          <input
            type="text"
            name="lastname"
            value={form.lastname}
            onChange={handleChange}
            className={errors.lastname ? 'error-input' : ''}
          />
          {errors.lastname && <small className="error-text">{errors.lastname}</small>}
        </div>
        <div className="form-row">
          <label>Phone Number</label>
          <input
            type="tel"
            name="phnno"
            value={form.phnno}
            onChange={handleChange}
            className={errors.phnno ? 'error-input' : ''}
            maxLength={12}
          />
          {errors.phnno && <small className="error-text">{errors.phnno}</small>}
        </div>
        <div className="form-row">
          <label>Department</label>
          <input
            type="text"
            name="department"
            value={form.department}
            onChange={handleChange}
            className={errors.department ? 'error-input' : ''}
          />
          {errors.department && <small className="error-text">{errors.department}</small>}
        </div>
        <div className="form-row">
          <label>Date of Joining</label>
          <input
            type="date"
            name="date_of_joining"
            value={form.date_of_joining}
            onChange={handleChange}
            className={errors.date_of_joining ? 'error-input' : ''}
          />
          {errors.date_of_joining && <small className="error-text">{errors.date_of_joining}</small>}
        </div>
        <div className="form-row">
          <label>City</label>
          <input
            type="text"
            name="city"
            value={form.city}
            onChange={handleChange}
            className={errors.city ? 'error-input' : ''}
          />
          {errors.city && <small className="error-text">{errors.city}</small>}
        </div>
        <div className="form-row">
          <label>State</label>
          <input
            type="text"
            name="state"
            value={form.state}
            onChange={handleChange}
            className={errors.state ? 'error-input' : ''}
          />
          {errors.state && <small className="error-text">{errors.state}</small>}
        </div>
        <div className="form-row">
          <label>Country</label>
          <input
            type="text"
            name="country"
            value={form.country}
            onChange={handleChange}
            className={errors.country ? 'error-input' : ''}
          />
          {errors.country && <small className="error-text">{errors.country}</small>}
        </div>

        <button type="submit" className="btn-save" disabled={loading}>
          {loading ? 'Saving...' : 'Save Changes'}
        </button>
        {error && <div className="error-text form-error">{error}</div>}
      </form>
    </div>
  );
};

export default Profile;


.profile-container {
  max-width: 600px;
  margin: 2rem auto;
  background: #f9f9fb;
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.profile-title {
  text-align: center;
  font-weight: 700;
  color: #3a3f58;
  margin-bottom: 1.5rem;
}

.profile-form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.form-row {
  display: flex;
  flex-direction: column;
}

.form-row label {
  margin-bottom: 6px;
  font-weight: 600;
  color: #4a4e69;
}

.form-row input {
  padding: 10px 12px;
  border-radius: 6px;
  border: 1.8px solid #d3d3d3;
  font-size: 1rem;
  transition: border-color 0.3s ease;
}

.form-row input:focus {
  border-color: #6c63ff;
  outline: none;
  box-shadow: 0 0 8px #6c63ff88;
}

.error-input {
  border-color: #e63946;
}

.error-text {
  color: #e63946;
  font-size: 0.85rem;
  margin-top: 4px;
}

.form-error {
  margin-top: 1rem;
  text-align: center;
}

.btn-save {
  padding: 12px;
  background: #6c63ff;
  color: white;
  font-weight: 700;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.btn-save:hover:not(:disabled) {
  background-color: #574b90;
}

.btn-save:disabled {
  background-color: #aaa;
  cursor: not-allowed;
}
