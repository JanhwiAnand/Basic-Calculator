export const getToken = state => state.auth.token;
export const getUser = state => state.auth.user;
export const getAuthError = state => state.auth.error;
export const getAuthLoading = state => state.auth.loading;
export const getCurrentLeaves = state => state.leaves.currentLeaves;
export const getAppliedLeaves = state => state.leaves.appliedLeaves;
export const getLeaveHistory = state => state.leaves.leaveHistory || { content: [] };
export const getLeaveBalances = state => state.leaves.leaveBalances;
export const getLeaveError = state => state.leaves.error;
export const getLeaveLoading = state => state.leaves.loading;
export const getPendingLeaves = state => state.leaves.pendingLeaves;
export const getAppliedLeavesByDateRange = state => state.leaves.appliedLeavesByDateRange || [];
//for forgot password part
export const getAuthMessage=state=>state.auth.message;

//for reset password
export const getResetPasswordLoading=(state)=>state.auth.loading;
export const getResetPasswordMessage=(state)=>state.auth.message;
export const getResetPasswordError=(state)=>state.auth.error;

//for profile
export const getUserProfile = (state) => state.user.profile;
export const getUserLoading = (state) => state.user.loading;
export const getUserError = (state) => state.user.error;
// User Reducer: Manages user-related state
const initialState = {
  users: [],
  loading: false,
  error: null,
  profile: null
};

const userReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'ADD_USER_REQUEST':
      return { ...state, loading: true, error: null };
    case 'ADD_USER_SUCCESS':
      console.log("here"+action.payload)
      return { ...state, users: [...state.users, action.payload], loading: false };
    case 'ADD_USER_FAILURE':
      return { ...state, error: action.payload, loading: false };

    case 'FETCH_USER_REQUEST':
    case 'UPDATE_USER_REQUEST':
      return { ...state, loading: true, error: null };

    case 'FETCH_USER_SUCCESS':
      return { ...state, profile: action.payload, loading: false };

    case 'UPDATE_USER_SUCCESS':
      return { ...state, profile: action.payload, loading: false };

    case 'FETCH_USER_FAILURE':
    case 'UPDATE_USER_FAILURE':
      return { ...state, error: action.payload, loading: false };
    default:
      return state;
  }
};

export default userReducer;
  dispatch({ type: 'ADD_USER_REQUEST' });
  try {
    const response = await axios.post('http://localhost:5000/api/users', userData, {
      headers: { Authorization: `Bearer ${token}` },
    });
    console.log(response.data)
    dispatch({ type: 'ADD_USER_SUCCESS', payload: response.data });
  } catch (error) {
    dispatch({ type: 'ADD_USER_FAILURE', payload: error.response?.data?.errors[0] || 'Failed to add user' });
  }
};


const handleSubmit = async (e) => {
    e.preventDefault();
    if (!isFormValid()) {
      alert('Please fill all fields correctly.');
      return;
    }
    setAddUserLoading(true);
    try {
      const { confirmPassword, ...userWithoutConfirm } = employee;
      const response = await dispatch(addUser(userWithoutConfirm, token));
      console.log(response)
      if (response?.success) {
        console.log("success")
        alert('User added successfully!');
        setEmployee({ email: '', firstname: '', lastname: '', department: '', phnno: '', country: '', state: '', city: '', date_of_joining: '', password: '', confirmPassword: '', role: 'EMPLOYEE' });
        setErrors({});
        setPasswordStrength('');
      }
    } catch (error) {
      console.log("failure")
      alert(error.message || 'Failed to add user');
    } finally {
      setAddUserLoading(false);
    }
  };
